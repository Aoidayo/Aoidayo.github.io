
[{"content":"","date":"2025年02月07日 15時38分","externalUrl":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"2025年02月07日 15時38分","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025年02月07日 15時38分","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"2025年02月07日 15時38分","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" 参考 # Hugo安装 零成本搭建个人博客：hugo安装 - 知乎 Hugo安装官方文档 Hugo原仓库 Hugo使用参考文档 加密 Hugo | 为博客文章添加密码 – Zoe\u0026rsquo;s Dumpster. hugo-enc 主题 blowfish 使用blowfish主题的博客示例 前三个有github参考可以用于参考 捣鼓静态博客时在github上抄别人的配置，比费劲巴拉的看教程文档来的舒服。 Ast3risk-ops/website 一位印尼前端的博客 江ノ島エスカー 详解程序中循环次数的判断 · Ohdmire GithubActions 自动部署 使用 Github Actions 自动部署 hugo 博客 | Choi\u0026rsquo;s Notes 使用 GitHub Actions 自动化 Hugo 博客部署 - MartinLwx\u0026rsquo;s Blog 基于 Github Action 自动构建 Hugo 博客 - 问题： Hugo主题blowfish搜索功能失效的解决办法之一 - 哔哩哔哩 CDN 使用双线 DNS 和 CDN 加速你的 GitHub Page · 瞳のBlog Hugo和Blowfish使用固定版本如下，方便后面维护\n# hugo 0.140.2 # blowfish latest-version: 2.82.0 【forked】 # 考虑后续是升级，在hugo起的myblog中将blowfish中的配置文件准备好 安装Hugo # 到Hugo原仓库下载预编译的hugo extened二进制文件\n# linux wget wget https://github.com/gohugoio/hugo/releases/download/v0.143.1/hugo_extended_0.143.1_linux-amd64.tar.gz tar -zxvf filename.tar.gz -C ./ # 添加至环境变量 # 将 `hugo` 目录添加到现有的 `PATH` 环境变量中 # 使用echo $path查看环境变量 nano ~/.bashrc # 添加path export PATH=$PATH:/vol1/1000/docker/docker_data/hugo source ~/.bashrc # 检查 hugo version Hugo规则 # 标题和正文之间必须有空行 一级标题无法被文章右侧的大纲TOC渲染 代码块必须注明语言才能使用enableCodeCopy, 以 kill process 为例 Hugo渲染规则，默认只渲染过去的文章没当前文章不渲染 hugo文章缺失 在hugo.yaml根级加入buildFuture: true 本篇文章定义发布时间为一千年以后, 如果你可以看到，就说明yaml在工作。 hugo.toml 中的baseURL必须指定为访问的网址，否则无法搜索（本地部署无法搜索的原因） 主题配置 # Blowfish # 基本沿用website仓库的配置，略作修改。\n目录结构 # # 目录结构 |-- ./.github | `-- ./.github/workflows |-- ./archetypes # frontmatter默认 |-- ./assets # 图片文件引用 | `-- ./assets/img |-- ./config # 配置文件 | `-- ./config/_default | |-- ./config/_default/hugo.toml | |-- ./config/_default/languages.zh-cn.toml | |-- ./config/_default/markup.toml | |-- ./config/_default/menus.zh-cn.toml | `-- ./config/_default/params.toml |-- ./content # 这里放文章 | `-- ./content/blog | |-- ./content/blog/blog-history | `-- ./content/blog/use-hugo |-- ./data |-- ./i18n |-- ./layouts # 可以用于修改默认页面，比如comments.html |-- ./static # 网站默认图片位置 `-- ./themes # 主题here short code # shortcode 图标 # 将从阿里图标上下载的icon.svg进行格式转换，将fill中的值全部替换为 currentColor。\nimport re import argparse def replace_fill_with_currentcolor(svg_content): # 使用正则表达式查找并替换所有的 fill=\u0026#34;#xxxxxx\u0026#34; 为 fill=\u0026#34;currentColor\u0026#34; updated_svg = re.sub(r\u0026#39;fill=\u0026#34;[^\u0026#34;]+\u0026#34;\u0026#39;, \u0026#39;fill=\u0026#34;currentColor\u0026#34;\u0026#39;, svg_content) return updated_svg def main(): # 设置命令行参数 parser = argparse.ArgumentParser(description=\u0026#34;Replace all fill color values in an SVG file with \u0026#39;currentColor\u0026#39;.\u0026#34;) parser.add_argument(\u0026#39;-f\u0026#39;,\u0026#39;--file\u0026#39;, help=\u0026#34;Path to the input SVG file\u0026#34;) args = parser.parse_args() # 读取原始 SVG 文件 try: with open(args.file, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: svg_content = file.read() except FileNotFoundError: print(f\u0026#34;Error: The file \u0026#39;{args.input_file}\u0026#39; does not exist.\u0026#34;) return # 替换 fill 值 updated_svg_content = replace_fill_with_currentcolor(svg_content) # 将修改后的 SVG 内容保存到新的文件 with open(args.file, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: file.write(updated_svg_content) print(f\u0026#34;SVG fill color replaced with currentColor successfully! Saved to \u0026#39;{args.file}\u0026#39;.\u0026#34;) # python convert_svg.py -f bilibili.svg if __name__ == \u0026#34;__main__\u0026#34;: main() Github Actions # Github Actions PersonalAccessToken：hidden here\ncustom domain # 现在github.io配置页面定义custom domain为自己的域名 第二步DNS验证：在cloudflare上，将自己的三级域名Cname到 github.io 上。 现在访问github.io会自动跳转到custom domain上。 Actions # 1、申请token settings-Developrt Settings-Personal access tokens-Tokens(classic) 2、在仓库中配置Actions脚本\nname: deploy on: push: workflow_dispatch: schedule: # Runs everyday at 0:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build Web run: hugo - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: aoidayo/aoidayo.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} cname: blog.aoidayo.site 3、在仓库中配置Token\nsettings/secrets and variables/actions中添加你申请的token\nCDN【TODO】 # Github pages + cloudflare\n要使用国内的cdn，需要备案，暂时搁置。\n备份博客 # 在家里的服务器上添加一个用端口访问的备份博客，同时使用Github Actions自动部署。\nnginx # # docker docker run -d \\ --privileged \\ --name nginx-server \\ -p 1024:80 \\ -v /vol1/1000/docker/docker_data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro\\ -v /vol1/1000/docker/docker_data/nginx/conf:/etc/nginx/conf.d:ro \\ -v /vol1/1000/docker/docker_data/nginx/ssl:/home/dockers/nginx/ssl \\ -v /vol1/1000/docker/docker_data/nginx/html:/usr/share/nginx/html:rw \\ nginx # https://www.cnblogs.com/Kingram/p/15009385.html # 修改容器中的nginx.conf # user nginx; user root; docker cp ./nginx.conf nginx-server:/etc/nginx/nginx.conf # public/* -\u0026gt; nginx/html/hugo # nginx/conf/hugo.conf server{ #只代理80端口 listen 80; # 监听指定域名 server_name you.aoidayo.site; location / { root /usr/share/nginx/html/hugo; index index.html index.htm; } } Hugo常用命令 # hugo new site myblog hugo new content blog/my-first-blog/my-first-blog.md # 在content/下面新建blog/xx/index.md hugo new post xx/index.md # 在content/post下面新建xx/index.md # hugo new 有扩展用法【TODO】 hugo # 生成public和resources # 部署在1313端口访问 hugo server --theme blowfish --bind 0.0.0.0 --port 1313 hugo server --theme blowfish --bind 0.0.0.0 --port 1313 --buildDrafts Linux常用命令 # 解压 # # tar tar -zxvf filename.tar.gz -C ./ - `-t`: 查看 `.tar.gz` 文件中的内容。 - `-x`: 解压文件。 - `-z`: 使用 `gzip` 解压。 - `-v`: 显示解压进度。 - `-f`: 文件名。 - `-C`: 指定解压路径。 # zip unzip xxx.zip -d ./ kill process # # windows netstat -ano | findstr :8080 taskkill /PID 1234 /F netstat -ano | findstr :8080 # Linux ps aux | grep hugo kill -9 PID 树形目录 # # windows tree /f func : 打印当前目录下的所有目录和文件 # [](https://www.cnblogs.com/ricolee/p/cmd-tree.html) # 没找到其它参数可以只打印一级或者二级目录类似的参数； # 安装tree https://blog.csdn.net/qq_33154343/article/details/100064726 tree -dL # linux tree -dL /path/to/dir -d /path/to/dir -L 显示指定层级 Appendix # 从0构建Hugo主题仓库 # ######################## /1. hugo new site myblog/ ######################### # hugo new site myblog # 创建新网站 root@familyNas:/vol1/1000/docker/docker_data/hugo# hugo new site myblog Congratulations! Your new Hugo site was created in /vol1/1000/docker/docker_data/hugo/myblog. Just a few more steps... 1. Change the current directory to /vol1/1000/docker/docker_data/hugo/myblog. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. ######################## /2. 修改配置文件/ ######################### # config/_default/下面的所有toml ######################## /2. 安装主题/ ######################### ## cd myblog ## git init ## git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish ## 这里可以替换成自己fork的仓库 ######################## /3. hugo server/ ######################### ## hugo server ## hugo server --theme blowfish --bind 0.0.0.0 --port 1313 ## hugo server --theme blowfish --bind 0.0.0.0 --port 1313 --buildDrafts ### -D means --buildDrafts ### windows hugo server一直是用不了1313的原因https://blog.weiqh.net/2022/11/16/Windows-10-%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/ ######################## /4. hugo new/ ######################### # hugo new content blog/my-first-blog.md gitignore 4 hugo # # Hugo resources/ public/ # Hugo themes # themes/blowfish/ # Binaries for programs and plugins *.exe *.exe~ *.dll *.so *.dylib # Test binary, built with `go test -c` *.test # Output of the go coverage tool, specifically when used with LiteIDE *.out # Dependency directories (remove the comment below to include it) # vendor/ # others node_modules .hugo_build.lock # OS generated files .DS_Store .DS_Store? ._* .Spotlight-V100 .Trashes .idea .jampack ","date":"2025年02月07日 15時38分","externalUrl":null,"permalink":"/blog/use-hugo/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e参考 \n    \u003cdiv id=\"%E5%8F%82%E8%80%83\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%8F%82%E8%80%83\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHugo安装\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/440175312\" target=\"_blank\"\u003e零成本搭建个人博客：hugo安装 - 知乎\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/installation/linux/\" target=\"_blank\"\u003eHugo安装官方文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\"\u003eHugo原仓库\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/getting-started/quick-start/\" target=\"_blank\"\u003eHugo使用参考文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e加密\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blog.tantalum.life/posts/encrypted-blog-posts/\" target=\"_blank\"\u003eHugo | 为博客文章添加密码 – Zoe\u0026rsquo;s Dumpster.\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/adityatelange/hugo_enc\" target=\"_blank\"\u003ehugo-enc\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e主题\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blowfish.page/\" target=\"_blank\"\u003eblowfish\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e使用blowfish主题的博客示例\n\u003cul\u003e\n\u003cli\u003e前三个有github参考可以用于参考\u003c/li\u003e\n\u003cli\u003e捣鼓静态博客时在github上抄别人的配置，比费劲巴拉的看教程文档来的舒服。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Ast3risk-ops/website\" target=\"_blank\"\u003eAst3risk-ops/website\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/utrodus/utrodus.com\" target=\"_blank\"\u003e一位印尼前端的博客\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://enoshima-escar.zen96k.mydns.jp/\" target=\"_blank\"\u003e江ノ島エスカー\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ohdmire.github.io/posts/loopcount/#%E6%A4%8D%E6%A0%91%E9%97%AE%E9%A2%98\" target=\"_blank\"\u003e详解程序中循环次数的判断 · Ohdmire\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eGithubActions\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cloud.tencent.com/developer/article/2262171\" target=\"_blank\"\u003e自动部署\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://smc.im/post/deploy-hugo-blog-with-github-actions/\" target=\"_blank\"\u003e使用 Github Actions 自动部署 hugo 博客 | Choi\u0026rsquo;s Notes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://martinlwx.github.io/zh-cn/use-github-actions-to-automate-hugo-build/\" target=\"_blank\"\u003e使用 GitHub Actions 自动化 Hugo 博客部署 - MartinLwx\u0026rsquo;s Blog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.lixueduan.com/posts/blog/01-github-action-deploy-hugo/\" target=\"_blank\"\u003e基于 Github Action 自动构建 Hugo 博客 -\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e问题：\n\u003ca href=\"https://www.bilibili.com/opus/908761972570325045\" target=\"_blank\"\u003eHugo主题blowfish搜索功能失效的解决办法之一 - 哔哩哔哩\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCDN\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.hetong-re4per.com/posts/cdn-for-your-github-page/\" target=\"_blank\"\u003e使用双线 DNS 和 CDN 加速你的 GitHub Page · 瞳のBlog\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHugo和Blowfish使用固定版本如下，方便后面维护\u003c/p\u003e","title":"使用hugo","type":"blog"},{"content":" FrameWork # Typecho 24/1/? # wordpress的精简版本，用docker装容易产生nginx的user:www-data 权限问题，在使用时必须没写完一篇文章就sudo chmod -Rf 777 typecho/一次，其他没有缺点，主题也都不错，主要走简洁风（Handsome开心版）。\n因为权限问题弃用。\nHello Hexo 24/4/14 # 第一个博客在github.io上使用Hexo和GithubActions搭建。\nGithub原生支持的静态博客框架有Jekyll, Hexo, Hugo这三个，其中Hexo使用起来最麻烦，Hugo和Jekyll稍微简单一点。\n这类静态博客使用起来最大的槽点就是主题基本上没有一个比较详细的使用说明，当你 clone一个主题下来后，可以说是开箱不能用🤣，所有关乎到日常使用以及美观的配置都得你自己摸索（甚至直接在github上找别人的配置文件也不保证能100%复现），这也就导致了网上关于静态博客如何配置的教程也是最多的，最奇怪的一点就是为什么作者不能给一个开箱即用的 simple starter再搭配一个接入github评论的 mkdocs让大家来讨论，这就是前端的奇奇怪怪之处吧。\n我尝试过如下几种静博框架的不同主题：\nHexo Butterfly Hugo Blowfish Stack Jekyll tmaize-blog Hello Hugo 24/4/14 # Hugo是我尝试过的三个静态博客框架中，视觉效果最为出色的一个。特别是其中的Blowfish和Stack主题，它们的设计简洁而不失优雅，色调和排版清新现代。Blowfish主题一种类似苹果的背景高斯模糊展示两种层次的背景，Stack有一种说不上来的直观、流畅。\n总之Hugo我很喜欢，但是配置和使用太麻烦了。\n顺带一提，Hugo虽然原生支持markdown，但是如果你要在页面上显示目录的话，只能使用二级及以下的目录，不能使用一级目录撰文。\nHello Wordpress 24/5/? # Wordpress的Sakurairo很好，但是太重了，我的小带宽承受不了。\nHello Halo 24/10/12 # 争议性最大的，彼时的Halo还没有开始收费，其在12月份宣布启用专业版收费，价格相当高，960买断才能使用应用市场中的插件。\n抛开争议话题不谈，Halo本身做的还是很优秀的，较低的内存占用和较快的响应速度、不算丑的外观、简单的docker部署、两键将备份打包迁移到新网站，这些优点是许多用户选择它的理由，对比停更几年的Typecho和高占用的Wp，让人很难不选择Halo。\nDeployMent # 旅游地图 24/11/1 # 偶尔看看部署的这个小玩具，可以想起旅游的快乐时光。\nNas导航 24/11/1 # copy一个学弟的导航页，用来重定向到我的nas服务。\nPhoto by Xiaomi 14 Transfer # 博客迁移 25/1/23 # 其实更早，大概在25/1/11左右就已经迁移到家里的服务器上了。\n因为没有给80和443端口，所以只能用端口访问了😭。\n","date":"2025年02月04日 15時38分","externalUrl":null,"permalink":"/blog/blog-history/","section":"","summary":"\u003ch2 class=\"relative group\"\u003eFrameWork \n    \u003cdiv id=\"framework\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#framework\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\n\u003ch3 class=\"relative group\"\u003eTypecho 24/1/? \n    \u003cdiv id=\"typecho-241\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#typecho-241\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003ewordpress的精简版本，用docker装容易产生\u003ccode\u003enginx的user:www-data\u003c/code\u003e 权限问题，在使用时必须没写完一篇文章就\u003ccode\u003esudo chmod -Rf 777 typecho/\u003c/code\u003e一次，其他没有缺点，主题也都不错，主要走简洁风（Handsome开心版）。\u003c/p\u003e\n\u003cp\u003e因为权限问题弃用。\u003c/p\u003e\n\n\n\u003ch3 class=\"relative group\"\u003eHello Hexo 24/4/14 \n    \u003cdiv id=\"hello-hexo-24414\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#hello-hexo-24414\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e第一个博客在github.io上使用Hexo和GithubActions搭建。\u003c/p\u003e\n\u003cp\u003eGithub原生支持的静态博客框架有Jekyll, Hexo, Hugo这三个，其中Hexo使用起来最麻烦，Hugo和Jekyll稍微简单一点。\u003c/p\u003e\n\u003cp\u003e这类静态博客使用起来最大的槽点就是主题基本上没有一个比较详细的使用说明，当你 \u003ccode\u003eclone\u003c/code\u003e一个主题下来后，可以说是开箱不能用🤣，所有关乎到日常使用以及美观的配置都得你自己摸索（甚至直接在github上找别人的配置文件也不保证能100%复现），这也就导致了网上关于静态博客如何配置的教程也是最多的，最奇怪的一点就是为什么作者不能给一个开箱即用的 \u003ccode\u003esimple starter\u003c/code\u003e再搭配一个接入github评论的 \u003ccode\u003emkdocs\u003c/code\u003e让大家来讨论，这就是前端的奇奇怪怪之处吧。\u003c/p\u003e\n\u003cp\u003e我尝试过如下几种静博框架的不同主题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHexo\n\u003cul\u003e\n\u003cli\u003eButterfly\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHugo\n\u003cul\u003e\n\u003cli\u003eBlowfish\u003c/li\u003e\n\u003cli\u003eStack\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJekyll\n\u003cul\u003e\n\u003cli\u003etmaize-blog\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 class=\"relative group\"\u003eHello Hugo 24/4/14 \n    \u003cdiv id=\"hello-hugo-24414\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#hello-hugo-24414\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eHugo是我尝试过的三个静态博客框架中，视觉效果最为出色的一个。特别是其中的Blowfish和Stack主题，它们的设计简洁而不失优雅，色调和排版清新现代。Blowfish主题一种类似苹果的背景高斯模糊展示两种层次的背景，Stack有一种说不上来的直观、流畅。\u003c/p\u003e","title":"Blog History","type":"blog"},{"content":"备用博客 (防止github page挂了)\n学生\n绝望南通人 斗破苍穹/JUMP/阿梓 Recent Posts 使用hugo 2025年02月07日 15時38分\u0026middot;892 字\u0026middot;5 分钟 Blog History 2025年02月04日 15時38分\u0026middot;72 字\u0026middot;1 分钟 All Posts ","externalUrl":null,"permalink":"/","section":"","summary":"\u003cp\u003e\u003ca href=\"https://you.aoidayo.site:1024/\" target=\"_self\"\u003e备用博客\u003c/a\u003e (防止github page挂了)\u003cbr\u003e\u003c/p\u003e\n\u003c!-- \u003ch3 style='color:#CBD5E1'\u003e --\u003e\n\u003ch3 id=\"typeit-6fb22d3943ec7794c447a8e7c1bb77a4\"\u003e\u003c/h3\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-6fb22d3943ec7794c447a8e7c1bb77a4\", {\n        strings: [\"\",\"「好きだよ」と伝えればいいのに\",\"願いかける　恋音と雨空\",\"\"],\n        speed:  300 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  false ,\n        waitUntilVisible:  true ,\n        loop:  true \n      }).go();\n    });\n\u003c/script\u003e\n\u003c!-- \u003c/h3\u003e --\u003e\n\u003cdiv\u003e\n学生\u003cbr\u003e\n绝望南通人 \u003cbr\u003e\n\u003ca href='https://book.qidian.com/info/1209977/' target=\"_blank\"\u003e斗破苍穹\u003c/a\u003e/JUMP/\u003ca href=\"https://space.bilibili.com/7706705\" target=\"_blank\"\u003e阿梓\u003c/a\u003e \u003cbr\u003e\n\u003c/div\u003e\n\u003c!-- \u003ca\n  class=\"!rounded-md bg-primary-600 px-4 py-2 !text-neutral !no-underline hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"\n  href=\"/posts\"\n  target=\"_self\"\n  \n  role=\"button\"\n\u003e\n  \nPosts\n\n\u003c/a\u003e\n --\u003e\n\u003c!-- \u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  :wave: Hi there!\n\u003c/div\u003e\n --\u003e\n\u003c!-- I game too much. I also write words onto this site sometimes.  --\u003e\n\u003c!-- \u003cthe-fold\u003e\u003c/the-fold\u003e --\u003e\n\n\n\n\n\n\n\n\u003ch2 class=\"mt-20 text-2xl font-extrabold mb-10\"\u003eRecent Posts\u003c/h2\u003e\n\n\n\n\n\u003csection class=\"space-y-10 w-full mt-10 mb-10\"\u003e\n    \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/use-hugo/\"\u003e\n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/blog/use-hugo/feature_hu_9454fddbb29a7617.jpg);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/use-hugo/\"\u003e使用hugo\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-02-07T15:38:16\u0026#43;08:00\"\u003e2025年02月07日 15時38分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e892 字\u003c/span\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan title=\"预计阅读\"\u003e5 分钟\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/blog-history/\"\u003e\n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/img/background_hu_16dc17bce098ace1.png);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/blog-history/\"\u003eBlog History\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-02-04T15:38:16\u0026#43;08:00\"\u003e2025年02月04日 15時38分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e72 字\u003c/span\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan title=\"预计阅读\"\u003e1 分钟\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n    \n\u003c/section\u003e\n\n\n\n\u003ca\n  class=\"!rounded-md bg-primary-600 px-4 py-2 !text-neutral !no-underline hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"\n  href=\"/blog\"\n  target=\"_self\"\n  \n  role=\"button\"\n\u003e\n  \nAll Posts\n\n\u003c/a\u003e","title":"","type":"page"},{"content":"博客写在这里哦。\n","externalUrl":null,"permalink":"/blog/","section":"","summary":"\u003cp\u003e博客写在这里哦。\u003c/p\u003e","title":"","type":"blog"}]