
[{"content":"","date":"2025年04月21日 20時25分","externalUrl":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"2025年04月21日 20時25分","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" PyG中的图神经网络中，scatter和gather运算（离散和聚集）都是非常常见的操作。\n我们以GAT为例，说明scatter在GAT中的应用：一是相似度系数的归一，二是 \\(h_i^{\u0026rsquo;}\\) 的加权邻域聚合。\n相似度系数归一\n$$ \\alpha_{i,j} = \\frac{\\exp(LeakyReLU(e_{i,j}))}{\\sum \\limits_{k \\in N(i)} \\exp(LeakyReLU(e_{i,k})) } $$\n其中，分母部分聚合节点 \\(i\\) 所有邻边相似度系数的运算可以用 scatter_add 简洁优雅的实现。\n\\(h_i^{\u0026rsquo;}\\) 的加权邻域聚合\n$$ h_{i}^{\u0026rsquo;} = \\sigma( \\sum \\limits_{k \\in N(i)} \\alpha_{i,k} h_{k} ) $$\n这里的邻域聚合的操作逻辑基本同上，同样可以使用 scatter_add。\nQ:为什么要用scatter？同样一个邻域聚合的操作，我们可以使用for循环，预处理出neighbor照样可以聚合，那么我们为什么需要使用scatter呢？ A:答案就是scatter支持pytorch的并行化，同时更加便于pytorch的梯度传播。（for循环本身的效率其实不低，因为一个node只有有限个neighbor）\nscatter # self.scatter(dim, index, src) self: tensor张量 Args: dim: 沿dim轴索引 index(LongTensor): 索引 src: 写入self中的值张量，类型需要和self相同 作用：将src中的每个值，按index的指定索引，scatter至self中。 以3维张量为例，self中的值由如下公式决定： 同时self，index以及src需要满足如下条件：\nself、index、src的维度相同（即dim相同:self.dim()=index.dim()=src.dim()，非维度大小） 具体来说就是 index.shape (3,4,5), dim()=3,同理 src.shape=(4,5,6), dim()=3。因为需要执行如上公式的赋值，所以self、index、src的维度需要相同。 index每一个维度的大小 \u0026lt;= src每一个维度的大小, 即 \\(index.shape(i) \\leq src.shape(i),\\ i \\in [0,src.dim())\\) \\(index.shape(i) \\leq self.shape(i),\\ i \\in [0,src.dim()) \\ 且 i \\neq dim_{arg}\\), 即除开操作维度dim之外（指的是scatter的参数dim之外），其他维度的大小都必须小于self的对应维度大小。 理解起来同样很简单，因为其他维度需要索引self，而 index[i][j][k] 在操作维度之上无所谓，他只需要满足 index[i][j][k]\u0026lt;=self.dim(arg_dim) 即可。 张量index的数值大小约束：\nindex中的任意值，其大小需要在 [0, self.dim(arg_dim)-1] 的范围内。 index沿dim维度的一行，值必须唯一（弱约束，违反不报错，但是会产生无意义的重复scatter） 例1.index沿dim的一行数组，值不唯一，产生scatter的重复赋值 例2. index沿dim的一行数组，值唯一，scatter离散到不同的位置 scatter_add # scatter_add的基本原理同scatter，但是self的同一位置可以多次add（即不需要满足上面数学约束的第五条，允许index沿dim轴有重复值），以GAT的邻域聚合为例：\n单头GAT # 邻域相加，得到最后的结果，即 neighbor_sum[i] 为node_i的邻域聚合值。\n多头GAT # 基本原理仍然和单头相似，具体如下图所示：\nreference # 知乎 奔腾的黑猫 博客： PyTorch数据发散（scatter/scatter_add）与聚集（Gather）操作和二者关系 - 知乎 ","date":"2025年04月21日 20時25分","externalUrl":null,"permalink":"/blog/scatter-in-gnn/","section":"","summary":"\u003cp\u003ePyG中的图神经网络中，scatter和gather运算（离散和聚集）都是非常常见的操作。\u003c/p\u003e\n\u003cp\u003e我们以GAT为例，说明scatter在GAT中的应用：一是相似度系数的归一，二是 \\(h_i^{\u0026rsquo;}\\) 的加权邻域聚合。\u003c/p\u003e","title":"GNN中的scatter离散运算","type":"blog"},{"content":"","date":"2025年04月21日 20時25分","externalUrl":null,"permalink":"/tags/st/","section":"Tags","summary":"","title":"ST","type":"tags"},{"content":"","date":"2025年04月21日 20時25分","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" 引言 # conda在不启用libmamba时下载小包的速度就非常慢，一直 solving enviroment... 容易让人狂躁，更不用说用它来安装 pytorch。\n作为替换，可以在 阿里云的pytorch wheels镜像 上下载需要的pytorch，然后再使用 pip 安装，当然后续可能还需要安装 mkl 等依赖，虽然速度尚可，但是还需要手动解决依赖问题，还是有不小的麻烦的。\nconda也清楚自己的依赖解析问题，他们在最新版的conda中引入mamba项目的核心库——用c++重写的依赖项求解器libsolv，conda现在可以通过如下命令开启libmamba作为dependency solver, 支持conda包的高效依赖解析，并行下载与更快速的环境创建。同时，conda也支持直接下载mamba，作为当前环境中下包的一种替换方式。\nconda 启用libmamba作为依赖求解器 / 通过以下方法启用\n# 在base环境中安装conda-libmamba-solver conda install -n base conda-libmamba-solver conda config --set solver libmamba # or conda install numpy --solver=libmamba conda 启用mamba作为替代 / 通过以下方法启用\nconda config --set custom_channels.conda-forge https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ conda install -n base -c conda-forge mamba # or conda install -c conda-forge mamba mamba install numpy 上面的方法不错，当然有一个问题就出现了，conda下mamba的时候又在 solving environment 了怎么办？这个问题太地狱了。\n当然有解决方法，可以使用 mamba/micromamba 这两个类似于 conda/miniconda 的包管理器作为替代，只有一个问题，就是纯血 mamaba 不支持 pycharm 调试。\n不过这个问题也有解决方法，就是使用 miniforge，这个仅仅只内置 conda-forge 源的最小 conda+mamba 发行版，将 mamba 完美继承到 conda 里面，可以 conda 和 mamba 命令互换，几乎0学习成本，而且安装也很方便。\n最后再提一嘴 mamba 原作者正在维护的 pixi，这个工具更加类似于 venv，一个项目创建一个虚拟环境，和 conda/mamba 不是一个赛道的，而且 pixi 换源/镜像非常麻烦，现在不是很成熟。另外作为 pip 的替代品 uv，现在已经相当好用了，可以用conda或者mamba直接安装，因为 pip 的速度尚可，所以关于 uv 的介绍以后有机会再写吧。\n安装 # 如果已经装了一些包管理器，先卸载\n如果已经安装了micromamba，则卸载需要注意: micromamba如果是用cmd安装的，默认会安装在 C:/User/YourName 下面, 需要同时删除可执行文件和所有envs.\n关于miniforge:\n安装 miniforge/conda-forge官网 conda-forge/miniforge: A conda-forge distribution. miniforge github repo页面 conda-forge | community-driven packaging for conda | conda-forge | community-driven packaging for conda guide，同时参考mamba和conda micromamba conda windows安装时需要注意：\n安装时 Install 选项 JustForMe, 否则会出现创建环境下载包时权限不够,无法写入文件 手动添加miniforge的path 换源 # 使用mamba时需要使用pytorch和nvidia仓库的镜像源来下载 pytorch-cuda及其依赖，前者的国内镜像仓库很多，后者的镜像仓库国内只有南方科技大学和cernet校园联合镜像站mirrorz提供，所以一旦这两个哥们不提供支持了，mamba在国内也就废了。\n# 添加 pytorch 镜像 conda config --set custom_channels.pytorch https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ # 添加 nvidia 镜像 conda config --set custom_channels.nvidia https://mirrors.cernet.edu.cn/anaconda-extra/cloud/ .condarc\nwindows : C:\\Users\\ffs linux : ~/.condarc show_channel_urls: true channels: - defaults default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ custom_channels: pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ nvidia: https://mirrors.cernet.edu.cn/anaconda-extra/cloud/ conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ or\nchannels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ show_channel_urls: true custom_channels: pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ nvidia: https://mirrors.cernet.edu.cn/anaconda-extra/cloud/ conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ linux使用命令写入\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; ~/.condarc channels: - defaults show_channel_urls: true default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ custom_channels: pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ nvidia: https://mirrors.cernet.edu.cn/anaconda-extra/cloud/ conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ EOF 基本命令流 # mamba create -n mamba python=3.9 conda search pytorch-cuda=11.8 # mamba install pytorch-cuda=11.8=\u0026lt;build_version\u0026gt; -c nvidia -c pytorch mamba install pytorch-cuda=11.8=h8dd9ede_2 -c nvidia -c pytorch # conda search pytorch=2.3.0 --info mamba install pytorch=2.3.0=py3.9_cuda11.8_cudnn8_0 ","date":"2025年03月19日 22時00分","externalUrl":null,"permalink":"/blog/conda-or-mamba/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e引言 \n    \u003cdiv id=\"%E5%BC%95%E8%A8%80\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%BC%95%E8%A8%80\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003econda在不启用libmamba时下载小包的速度就非常慢，一直 \u003ccode\u003esolving enviroment...\u003c/code\u003e 容易让人狂躁，更不用说用它来安装 \u003ccode\u003epytorch\u003c/code\u003e。\u003c/p\u003e","title":"Miniforge：Conda solving enviroment终结者","type":"blog"},{"content":" 24年终总结 # 新年伊始，我喜欢在冲浪时刷刷关注的技术博主做的年终总结，看他们的学习工作与对生活的思考，但我几乎从来没有自己写过一篇。写作这件事情就像刚进入大学时的晚睡，如果从来没有晚睡，突然很晚睡觉那可能直接睡不着，但是如果后面天天到那个点再睡，其实也就慢慢适应了。\n这篇博客其实很早就开始写了，写了很久一直没写完，最近因为一些事情下决心一口气写完了。\n去年一年经历了许多:和朋友跑了很多地方旅游；本科毕业与分别；独自在母校开启研究生生活。欢笑苦乐五毒俱全只能说是，总之能平静的写下来，说明去年过的还行，我还是扛过来了。\n关于大学与分别 # 从小开始我就习惯减少与别人的联系，社交范围仅限于学习生活工作的几十米半径内，一旦超过我也很少主动联系。高一时填未来想考什么大学，我填的是认知中最远的兰州大学；高考填志愿时分数不够，除了徐州，其他清一色的填的是省外学校。\n不过好巧不巧的是，高中同班同学和我选的是同一个学校的同一门专业，我两高考分数相同，选修课他比我多一个a+，自然而然的也就被分到了同一个宿舍。\n另外两个舍友分别来自盐城和衢州，相近地方的，但我们的生活习性相差很大，我和盐城舍友习惯早睡，开始的时候每天晚上九点多就爬上床了。衢州同学是美国作息，和我们完全颠倒，我的老乡也经常凌晨三四点才睡。我是声音不敏感的类型，同学键盘非线性不规律的敲击声和屏幕溢出的五彩流光反而能让我入睡更加安心（太好了，这小子不在学习）。\n我们的关系很好，毕竟同一个专业每天一起上课吃饭和打游戏，相互抄作业和准备考试，现在回想起来都仿佛还在昨天。\n大二时例行专业分流，我和衢州舍友去了同一个小专业，换了两个舍友，一个四川一个甘肃。四川舍友纯纯的活宝，看到他我就想笑，喜欢在洗澡的时候唱歌，声音大的过道都能听见；学习时很专注，没事儿喜欢研究数学，算是我认识的人中少见的对数学又有天赋、又持之以恒努力的。甘肃舍友胖胖的很可爱，有心减肥无力坚持，我两都喜欢看小说，常常晚上没事儿干的时候就上起点中文网扫书，找到好看的书第二天没个十一二点下不了床。\n大三下学期时即将面临出路选择，我们宿舍从三月底四月初开始全面备战考研。中途暑假衢州舍友投了米哈游的技美，9月返校后没多久后就拿到了offer；我当时考研是因为不想留在徐州了，我想去更远的地方，说不清是逃避还是不想被留在学校一个人；到了9月下旬的时候，四川舍友拿到了保外的资格，在9.30号晚上拿了西工大的录取；我则是保内前几名，唏嘘一阵后我觉得压力很大，要不保内算了，于是也就保了本校。一套连招下来给我甘肃舍友整不会了，搁这儿都当了逃兵。\n大四寒假结束返校时时的雪后南门 大四本科毕设做完后，发现大二时往水卡里一怒之下充的1000块见了底，舍友们的行李和小物件也开始慢慢往家寄，一个个送舍友和认识的同学们离开，心里还是挺不好受的。我们班只有我一个男生留在本校，一层楼仿佛只剩下我一个人，每天晚上从实验室回我的单人宿舍，穿过漫布安全指示灯若隐若现绿光的楼层过道，总会不自觉想起曾经热闹的夜晚，键盘的敲击、洗澡时的歌声、深夜里的窃窃私语。\n在这个阴差阳错来到甚至后来想要逃离的城市里，我第一次感受到和同龄人分别的不舍。\n关于旅游 # 大四学期初保研后我就和四川舍友感觉能待在一起的日子越来越少，往后读研或是工作也不一定有这么空闲的时间，于是无计划性地去了很多地方:11月份先去爬了泰山，12月去了南京，那天狂走了将近4w步，我还发了条说说，12月底和考完研的盐城舍友去济南玩了一天，次年又陆陆续续去了洛阳和青岛。暑假和老乡一起去了北京和大同。年终时和师兄一起去爬了华山。\n不知道大家有没有看过楚门的世界或者岩井俊二拍的烟花。前者主角活在一个虚拟世界中，城市外超出边界的地方无法到达；后者则是因为小男孩的想象力局限，他在循环的梦中带着小女孩私奔时坐的轻轨永远逃不离这个他从小到大生活居住的城镇。\n岩井俊二-烟花 | b站观影地址 以前心情低沉时偶尔会觉得现实是虚构的，而旅游时总会不由庆幸这个世界是真实存在的。\n关于研究生生活 # 大四上保完研后找到了现在的导师提前进组，算是过上了研0生活，同级研0还有一个隔壁班的女生，对比研0和研1生活，还是能明显感觉到不同时期组里的不同氛围。之前很少开组会讨论学术，主要是项目会议以及去现场和甲方对接；进入研一以来常开组会，讨论论文进展，这其中主要原因是因为从23级开始毕业要求提高了，这给师兄师姐以及我们带来不小压力。当然我们研一的还是以项目为主，十一月和老师同学去了两趟郑州干活和汇报。\n去年拍的学院楼 关于依恋感情 # 和大多数人想象的不同，从我现在的身边统计学的视角来看，理工科学校里面也有很多男生谈恋爱。按观察，其实依恋感情和两个分子一起做受环境影响的无目的无规则布朗运动是没什么区别的，这种感情既不会朝某个特定的方向移动，也不会遵循固定轨迹，既不知道什么时候开始，也无法预测什么时候结束，大部分分子在这个过程中享受对彼此无计较的付出和获得。\n虽然在上面将依恋感情这件事情比作布朗运动，但现实终归更加复杂，总会有分子想要对抗这种随机性。\n我不愿意过多和朋友讨论感情，这种仅凭伶仃两人维系的感情无比脆弱。即使两个人曾经无比契合，也可能在某个瞬间走向分离。这种分离并非因为谁对谁错，而是因为感情本身就是一种流动的状态，无法被固定或预测。在分别的那一刻我不会对抗这种随机性，或许在真正经历一段感情之前，我会毫不犹豫放飞地那只白鸟。\n白鸟过河滩 ","date":"2025年03月18日 07時00分","externalUrl":null,"permalink":"/blog/24-sum/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e24年终总结 \n    \u003cdiv id=\"24%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#24%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e新年伊始，我喜欢在冲浪时刷刷关注的技术博主做的年终总结，看他们的学习工作与对生活的思考，但我几乎从来没有自己写过一篇。写作这件事情就像刚进入大学时的晚睡，如果从来没有晚睡，突然很晚睡觉那可能直接睡不着，但是如果后面天天到那个点再睡，其实也就慢慢适应了。\u003c/p\u003e","title":"24年年终总结","type":"blog"},{"content":"","date":"2025年03月18日 07時00分","externalUrl":null,"permalink":"/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/","section":"Tags","summary":"","title":"年终总结","type":"tags"},{"content":" 前言 # 最近使用Git管理Unity项目，误将Unity的Filo Cables包commit\u0026amp;push到仓库中了，折腾半天发现无法撤回，这个包没有导入到Unity之前就有12MB+, 对于一个Git仓库来说还是太大了，所以需要即时从.git中删除所有相关文件的历史提交记录，避免仓库越来越大，防止占用Github公共资源。\n工具 # 推荐使用git filter-repo，一个可以清理并重写仓库中历史记录的工具；自动清理本地仓库的引用与缓存；比git自带的git filter-branch更加高效，后者容易导致历史记录的混乱与重写；适合处理有高占用空间文件的仓库（比如Unity的3d-fbx文件，模型pt文件等等）。\ngit filter-repo：newren/git-filter-repo: Quickly rewrite git repository history (filter-branch replacement) 验证清理效果：git 自带命令 查看git仓库占用空间：git count-objects -vH 常用方法 # A. filter-repo # # 1. 文件夹 # 保留my_folder下面的所有文件, 删除其他所有文件 git filter-repo --path my_folder # --invert-paths 反转. 删除my_folder下面的所有文件 git filter-repo --path my_folder --invert-paths --force # 2. 文件 # --path-glob \u0026lt;file.name\u0026gt; 删除指定文件 git filter-repo --path-glob xxx.mp4 --invert-paths --force # 3. 占用空间 git filter-repo --strip-blobs-bigger-than 100K git filter-repo --strip-blobs-bigger-than 1M git filter-repo --strip-blobs-bigger-than 1G # 清理引用和缓存 git reflog expire --expire=now --all \u0026amp;\u0026amp; git gc --prune=now --aggressive # 可能清理完成之后，把remote也给清除了，这里重置 git remote add origin git@github.com:Aoidayo/xxx.git # push git push origin --force --all git push origin --force --tags B. 验证 # git rev-list 查看高占用文件， 剩余文件大小分布 git count-objects -vH git log \u0026lt;file/dir\u0026gt; # 1. git rev-list # 查看高空间占用的文件 : 列出 Git 仓库中占用空间最大的 10 个文件（blob 对象） git rev-list --objects --all | grep -f \u0026lt;(git verify-pack -v .git/objects/pack/*.idx | grep blob | sort -k 3 -n | cut -f 1 -d \u0026#34; \u0026#34;|tail -10) # 剩余文件大小分布 (B) git rev-list --objects --all | awk \u0026#39;{print $1}\u0026#39; | git cat-file --batch-check=\u0026#39;%(objecttype) %(objectname) %(objectsize) %(rest)\u0026#39; | awk \u0026#39;/^blob/ {print $3, $4}\u0026#39; | sort -n # 2. git count-objects -vH \u0026#39;\u0026#39;\u0026#39; git count-objects -vH count: 19 size: 25.71 KiB in-pack: 283 packs: 1 size-pack: 9.30 MiB prune-packable: 0 garbage: 0 size-garbage: 0 bytes \u0026#39;\u0026#39;\u0026#39; # 3. git log \u0026lt;file/dir\u0026gt; $ git log RopeUpDown\\ # 没有输出表示已经清理干净了 # 输出 和当前文件或者目录有关的commit history \u0026#39;\u0026#39;\u0026#39; \u0026gt; commit c656025c6c761d5f3fc0be2989c34232cdaf5dfb (HEAD -\u0026gt; main) Author: aoi \u0026lt;2908496836@qq.com\u0026gt; Date: Fri Feb 28 21:17:38 2025 +0800 fix(remove filo): add ignore commit 6f0a3ffb2731698ec5ce981f9fa281ee8332ba13 Author: aoi \u0026lt;2908496836@qq.com\u0026gt; Date: Fri Feb 28 20:57:55 2025 +0800 Rope Up Down \u0026#39;\u0026#39;\u0026#39; 附录 # 参考：\nGitFAQ-如何删除提交记录中的大文件_哔哩哔哩_bilibili Git清理.git文件夹中的大文件及.gitignore简单使用 - 知乎 DS ","date":"2025年02月28日 22時15分","externalUrl":null,"permalink":"/blog/git-big/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e前言 \n    \u003cdiv id=\"%E5%89%8D%E8%A8%80\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e最近使用Git管理Unity项目，误将Unity的\u003ccode\u003eFilo Cables\u003c/code\u003e包\u003ccode\u003ecommit\u0026amp;push\u003c/code\u003e到仓库中了，折腾半天发现无法撤回，这个包没有导入到Unity之前就有\u003ccode\u003e12MB+\u003c/code\u003e, 对于一个Git仓库来说还是太大了，所以需要即时从\u003ccode\u003e.git\u003c/code\u003e中删除所有相关文件的历史提交记录，避免仓库越来越大，防止占用Github公共资源。\u003c/p\u003e","title":"Git 清除.git仓库历史记录中的高占用内存文件","type":"blog"},{"content":"","date":"2025年02月28日 22時15分","externalUrl":null,"permalink":"/tags/git%E4%BD%BF%E7%94%A8/","section":"Tags","summary":"","title":"Git使用","type":"tags"},{"content":"","date":"2025年02月09日 15時38分","externalUrl":null,"permalink":"/categories/report/","section":"Categories","summary":"","title":"Report","type":"categories"},{"content":" Refer # 轨迹数据集 ECML/PKDD 15: Taxi Trajectory Prediction (I) | Kaggle 城市拓扑、路网/POI/城市边界 城市拓扑 OSM API (OpenStreetMap) 本质上 osmnx 和 overpass API 都是使用OSM的api获取 osmnx 可以用于获取最新时间的路网数据 Overpass API Overpass 官网 | Overpass by Private.coffee OSM历史数据服务 GeoFabrik 下载指定历史时间的城市路网数据（shp格式,由osm格式转换，路网数据丢失uv信息，当然包含很多富余数据）；同时提供osm.pbf格式的osm压缩数据,没有丢失信息，但是格式转换相当麻烦。 Fabrik上下载的shp转OSM数据介绍及下载 - 百里屠苏top - 博客园 城市边界 osmnx 直接获取 GADM，提供全球行政区边界数据的网站，同时也可以下载路网数据。它支持按国家或地区单独索引和下载。不支持历史数据下载。 level0为国家信息，level1为省份边界信息，level2为城市边界信息，level3为县级信息 不能单shp文件读取 GeoFabrik可以获取部分 shapefile road shapefile的highway枚举值说明 路网清洗 zdsjjtTLG/TrackIt: Map Matching Python Package Based on Hidden Markov Model(HMM) 数据集 # 我们能拿到的数据集分为两种：\n最原始的数据，轨迹数据以GPS点原始信息保留（lng,lat,timestamp,driver_id,user_id or order_id） 论文二次处理的数据集，轨迹数据的GPS点原始信息多半在经过降采样/地图匹配转换后丢失，不一定保留。 恢复GPS点粒度的POI信息困难，只能得到路段粒度的POI信息 城市拓扑、路网/POI/城市边界 # 目前不管是 osmnx 还是 overpassApi，简单的获取城市的boundary体验还不错，但是在框定较大范围的bbox或者boundary后获取数据的体验都不是很好，常给你报 ConnectTimeout 错误。\n作为openstreetmap的替代平台，GeoFabrik有几个优点：\n支持下载历史数据，最大限度的保留城市拓扑和poi信息 支持下载部分城市的边界范围数据 缺点就是一般只能下载国家级别的路网数据，需要你再框一次才能得到城市路网。 关于其他可见 参考 。\nshapefile # 包含这几种后缀的数据\n.shp：几何数据 .shx：几何索引 .dbf：属性数据 .prj：坐标系信息 .cpg：字符编码 shp方面包含如下：\nPoint gis_osm_places_free_1：包含城市、小镇、村庄等行政或聚居点的位置信息。 因数据而异，可能没有包含所有的place信息。 gis_osm_pois_free_1：兴趣点（Points of Interest，POI）数据，如餐厅、商店、景点等。 gis_osm_traffic_free_1：交通相关设施，如交通信号灯、停车标志、人行横道等。 Line gis_osm_roads_free_1：道路网络数据，包括高速公路、主干道、街道、小路、自行车道、人行道等。 PolyGon gis_osm_places_a_free_1：地点的多边形数据，如城市、小镇、村庄等的边界。 gis_osm_pois_a_free_1：兴趣点的多边形数据。 需要注意的是，road_shapefile中包含大量的冗余数据（没有必要添加的路段类型fclass），拿porto市举例：\n原始 Porto Road Shapefile Libcity porto road geo/rel 对比libcity处理的porto市路网数据，可以发现现有路网中存在许多冗余数据（比如porto市的最南边），所以需要进行路网数据的清洗。\n因为每个国家的情况不同，国内外的路段保留类型不建议使用相同的策略，对于国外的路网数据，保留如下字段：\nreserved_fclass = {\u0026#34;motorway\u0026#34;: 0, \u0026#34;trunk\u0026#34;: 1, \u0026#34;primary\u0026#34;: 2, \u0026#34;secondary\u0026#34;: 3, \u0026#34;tertiary\u0026#34;: 4, \u0026#34;unclassified\u0026#34;: 5, \u0026#34;residential\u0026#34;: 6, \u0026#34;motorway_link\u0026#34;: 7, \u0026#34;trunk_link\u0026#34;: 8, \u0026#34;primary_link\u0026#34;: 9, \u0026#34;secondary_link\u0026#34;: 10, \u0026#34;tertiary_link\u0026#34;: 11, \u0026#34;living_street\u0026#34;: 12, \u0026#34;road\u0026#34;: 13} 过滤后得到的路网稍显合理，但是仍需要进一步处理。\nFiltered Porto RoadMap 路网清洗 # 恢复uv信息 # 建图不光需要路网的线层信息，同样需要点层信息，这里的点指的是路段OD、uv。 osm数据有uv字段，但是从GeoFabrik上下载的shapefile丢失这部分数据，所以只能通过取路段的OD来作为uv。\n原始road shapefile（统一WGS-84,EPSG:4326坐标系操作）\n提取路段OD为uv 映射 set(uv) 建立点层 建立基础的点层和线层 修复路网 # 路网在恢复uv信息后需要清理环路、自边、自相交、联通性问题，同时进行拓扑优化和路网重塑，规整线层和点层。\n构建点层信息 自己构建：使用在恢复uv信息中得到的node构建点层 GoTrakIt：使用第三方包从线层构建点层 清理线层的环路、自边、自相交 处理标准路网的连通性问题 重映射点层 最后对路网做拓扑优化和路网重塑 最后得到构建路网的必须数据： road 和 node ，即 rel 和 geo 。\n轨迹清洗 # 行程切分 停留点删除 轨迹点上下采样 滑动窗口平均/卡尔曼滤波平滑 地图匹配 # FMM：fmm-py3: FMM for python3 ST-MapMatching：wenke727/ST-MapMatching: 基于时间和空间特性的全局地图匹配算法，基础路网可根据 bbox 下载并处理得到 GoTrackIt：zdsjjtTLG/TrackIt: Map Matching Python Package Based on Hidden Markov Model(HMM) POI k近邻 # 可以获取 Point和Polygon类型的POI数据（点、多边形面） 处理时为了方便起见，可以统一将坐标系投影到平面坐标系，作k近邻计算。 见仁见智：路段 k近邻POI/GPS k近邻POI k近邻可以在collate_fn中实现 ","date":"2025年02月09日 15時38分","externalUrl":null,"permalink":"/report/raw-data-process/","section":"","summary":"\u003ch2 class=\"relative group\"\u003eRefer \n    \u003cdiv id=\"refer\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#refer\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e轨迹数据集\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.kaggle.com/competitions/pkdd-15-predict-taxi-service-trajectory-i/data\" target=\"_blank\"\u003eECML/PKDD 15: Taxi Trajectory Prediction (I) | Kaggle\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e城市拓扑、路网/POI/城市边界\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e城市拓扑\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eOSM API (OpenStreetMap)\n\u003cul\u003e\n\u003cli\u003e本质上 \u003ccode\u003eosmnx\u003c/code\u003e 和 \u003ccode\u003eoverpass API\u003c/code\u003e 都是使用OSM的api获取\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eosmnx\u003c/code\u003e 可以用于获取最新时间的路网数据\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOverpass API\u003c/strong\u003e \u003ca href=\"https://overpass.kumi.systems/#about\" target=\"_blank\"\u003eOverpass 官网 | Overpass by Private.coffee\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eOSM历史数据服务\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://download.geofabrik.de/\" target=\"_blank\"\u003eGeoFabrik\u003c/a\u003e 下载指定历史时间的城市路网数据（shp格式,由osm格式转换，路网数据丢失uv信息，当然包含很多富余数据）；同时提供osm.pbf格式的osm压缩数据,没有丢失信息，但是格式转换相当麻烦。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cnblogs.com/bltstop/p/18090135\" target=\"_blank\"\u003eFabrik上下载的shp转OSM数据介绍及下载 - 百里屠苏top - 博客园\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e城市边界\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eosmnx\u003c/code\u003e 直接获取\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gadm.org/index.html\" target=\"_blank\"\u003eGADM\u003c/a\u003e，提供全球行政区边界数据的网站，同时也可以下载路网数据。它支持按国家或地区单独索引和下载。不支持历史数据下载。\n\u003cul\u003e\n\u003cli\u003elevel0为国家信息，level1为省份边界信息，level2为城市边界信息，level3为县级信息\u003c/li\u003e\n\u003cli\u003e不能单shp文件读取\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eGeoFabrik可以获取部分\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eshapefile\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://wiki.openstreetmap.org/wiki/Zh-hans:Map_Features#.E5.85.AC.E8.B7.AF\" target=\"_blank\"\u003eroad shapefile的highway枚举值说明\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e路网清洗\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/zdsjjtTLG/TrackIt\" target=\"_blank\"\u003ezdsjjtTLG/TrackIt: Map Matching Python Package Based on Hidden Markov Model(HMM)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e数据集 \n    \u003cdiv id=\"%E6%95%B0%E6%8D%AE%E9%9B%86\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%95%B0%E6%8D%AE%E9%9B%86\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e我们能拿到的数据集分为两种：\u003c/p\u003e","title":"数据清洗","type":"report"},{"content":"","date":"2025年01月07日 15時38分","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":" 参考 # Hugo安装 零成本搭建个人博客：hugo安装 - 知乎 Hugo安装官方文档 Hugo原仓库 Hugo使用参考文档 加密 Hugo | 为博客文章添加密码 – Zoe\u0026rsquo;s Dumpster. hugo-enc 主题 blowfish 使用blowfish主题的博客示例 前三个有github参考可以用于参考 捣鼓静态博客时在github上抄别人的配置，比费劲巴拉的看教程文档来的舒服。 Ast3risk-ops/website 一位印尼前端的博客 江ノ島エスカー 详解程序中循环次数的判断 · Ohdmire GithubActions 自动部署 使用 Github Actions 自动部署 hugo 博客 | Choi\u0026rsquo;s Notes 使用 GitHub Actions 自动化 Hugo 博客部署 - MartinLwx\u0026rsquo;s Blog 基于 Github Action 自动构建 Hugo 博客 - 问题： Hugo主题blowfish搜索功能失效的解决办法之一 - 哔哩哔哩 CDN 使用双线 DNS 和 CDN 加速你的 GitHub Page · 瞳のBlog Hugo和Blowfish使用固定版本如下，方便后面维护\n# hugo 0.140.2 # blowfish latest-version: 2.82.0 【forked】 # 考虑后续是升级，在hugo起的myblog中将blowfish中的配置文件准备好 安装Hugo # 到Hugo原仓库下载预编译的hugo extened二进制文件\n# linux wget wget https://github.com/gohugoio/hugo/releases/download/v0.143.1/hugo_extended_0.143.1_linux-amd64.tar.gz tar -zxvf filename.tar.gz -C ./ # 添加至环境变量 # 将 `hugo` 目录添加到现有的 `PATH` 环境变量中 # 使用echo $path查看环境变量 nano ~/.bashrc # 添加path export PATH=$PATH:/vol1/1000/docker/docker_data/hugo source ~/.bashrc # 检查 hugo version Hugo规则 # 标题和正文之间必须有空行 一级标题无法被文章右侧的大纲TOC渲染 代码块必须注明语言才能使用enableCodeCopy, 以 kill process 为例 Hugo渲染规则，默认只渲染过去的文章没当前文章不渲染 hugo文章缺失 在hugo.yaml根级加入buildFuture: true 本篇文章定义发布时间为一千年以后, 如果你可以看到，就说明yaml在工作。 hugo.toml 中的baseURL必须指定为访问的网址，否则无法搜索（本地部署无法搜索的原因） 主题配置 # Blowfish # 基本沿用website仓库的配置，略作修改。\n目录结构 # # 目录结构 |-- ./.github | `-- ./.github/workflows |-- ./archetypes # frontmatter默认 |-- ./assets # 图片文件引用 | `-- ./assets/img |-- ./config # 配置文件 | `-- ./config/_default | |-- ./config/_default/hugo.toml | |-- ./config/_default/languages.zh-cn.toml | |-- ./config/_default/markup.toml | |-- ./config/_default/menus.zh-cn.toml | `-- ./config/_default/params.toml |-- ./content # 这里放文章 | `-- ./content/blog | |-- ./content/blog/blog-history | `-- ./content/blog/use-hugo |-- ./data |-- ./i18n |-- ./layouts # 可以用于修改默认页面，比如comments.html |-- ./static # 网站默认图片位置 `-- ./themes # 主题here short code # shortcode 图标 # 将从阿里图标上下载的icon.svg进行格式转换，将fill中的值全部替换为 currentColor。\nimport re import argparse def replace_fill_with_currentcolor(svg_content): # 使用正则表达式查找并替换所有的 fill=\u0026#34;#xxxxxx\u0026#34; 为 fill=\u0026#34;currentColor\u0026#34; updated_svg = re.sub(r\u0026#39;fill=\u0026#34;[^\u0026#34;]+\u0026#34;\u0026#39;, \u0026#39;fill=\u0026#34;currentColor\u0026#34;\u0026#39;, svg_content) return updated_svg def main(): # 设置命令行参数 parser = argparse.ArgumentParser(description=\u0026#34;Replace all fill color values in an SVG file with \u0026#39;currentColor\u0026#39;.\u0026#34;) parser.add_argument(\u0026#39;-f\u0026#39;,\u0026#39;--file\u0026#39;, help=\u0026#34;Path to the input SVG file\u0026#34;) args = parser.parse_args() # 读取原始 SVG 文件 try: with open(args.file, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: svg_content = file.read() except FileNotFoundError: print(f\u0026#34;Error: The file \u0026#39;{args.input_file}\u0026#39; does not exist.\u0026#34;) return # 替换 fill 值 updated_svg_content = replace_fill_with_currentcolor(svg_content) # 将修改后的 SVG 内容保存到新的文件 with open(args.file, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: file.write(updated_svg_content) print(f\u0026#34;SVG fill color replaced with currentColor successfully! Saved to \u0026#39;{args.file}\u0026#39;.\u0026#34;) # python convert_svg.py -f bilibili.svg if __name__ == \u0026#34;__main__\u0026#34;: main() Github Actions # Github Actions PersonalAccessToken：hidden here\ncustom domain # 现在github.io配置页面定义custom domain为自己的域名 第二步DNS验证：在cloudflare上，将自己的三级域名Cname到 github.io 上。 现在访问github.io会自动跳转到custom domain上。 Actions # 1、申请token settings-Developrt Settings-Personal access tokens-Tokens(classic) 2、在仓库中配置Actions脚本\nname: deploy on: push: workflow_dispatch: schedule: # Runs everyday at 0:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build Web run: hugo - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: aoidayo/aoidayo.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} cname: blog.aoidayo.site 3、在仓库中配置Token\nsettings/secrets and variables/actions中添加你申请的token\nCDN【TODO】 # Github pages + cloudflare\n要使用国内的cdn，需要备案，暂时搁置。\n备份博客 # 在家里的服务器上添加一个用端口访问的备份博客，同时使用Github Actions自动部署。\nnginx # # docker docker run -d \\ --privileged \\ --name nginx-server \\ -p 1024:80 \\ -v /vol1/1000/docker/docker_data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro\\ -v /vol1/1000/docker/docker_data/nginx/conf:/etc/nginx/conf.d:ro \\ -v /vol1/1000/docker/docker_data/nginx/ssl:/home/dockers/nginx/ssl \\ -v /vol1/1000/docker/docker_data/nginx/html:/usr/share/nginx/html:rw \\ nginx # https://www.cnblogs.com/Kingram/p/15009385.html # 修改容器中的nginx.conf # user nginx; user root; docker cp ./nginx.conf nginx-server:/etc/nginx/nginx.conf # public/* -\u0026gt; nginx/html/hugo # nginx/conf/hugo.conf server{ #只代理80端口 listen 80; # 监听指定域名 server_name you.aoidayo.site; location / { root /usr/share/nginx/html/hugo; index index.html index.htm; } } Hugo常用命令 # hugo new site myblog hugo new content blog/my-first-blog/my-first-blog.md # 在content/下面新建blog/xx/index.md hugo new post xx/index.md # 在content/post下面新建xx/index.md # hugo new 有扩展用法【TODO】 hugo # 生成public和resources # 部署在1313端口访问 hugo server --theme blowfish --bind 0.0.0.0 --port 1313 hugo server --theme blowfish --bind 0.0.0.0 --port 1313 --buildDrafts Linux常用命令 # 解压 # # tar tar -zxvf filename.tar.gz -C ./ - `-t`: 查看 `.tar.gz` 文件中的内容。 - `-x`: 解压文件。 - `-z`: 使用 `gzip` 解压。 - `-v`: 显示解压进度。 - `-f`: 文件名。 - `-C`: 指定解压路径。 # zip unzip xxx.zip -d ./ kill process # # windows netstat -ano | findstr :8080 taskkill /PID 1234 /F netstat -ano | findstr :8080 # Linux ps aux | grep hugo kill -9 PID 树形目录 # # windows tree /f func : 打印当前目录下的所有目录和文件 # [](https://www.cnblogs.com/ricolee/p/cmd-tree.html) # 没找到其它参数可以只打印一级或者二级目录类似的参数； # 安装tree https://blog.csdn.net/qq_33154343/article/details/100064726 tree -dL # linux tree -dL /path/to/dir -d /path/to/dir -L 显示指定层级 Appendix # 从0构建Hugo主题仓库 # ######################## /1. hugo new site myblog/ ######################### # hugo new site myblog # 创建新网站 root@familyNas:/vol1/1000/docker/docker_data/hugo# hugo new site myblog Congratulations! Your new Hugo site was created in /vol1/1000/docker/docker_data/hugo/myblog. Just a few more steps... 1. Change the current directory to /vol1/1000/docker/docker_data/hugo/myblog. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. ######################## /2. 修改配置文件/ ######################### # config/_default/下面的所有toml ######################## /2. 安装主题/ ######################### ## cd myblog ## git init ## git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish ## 这里可以替换成自己fork的仓库 ######################## /3. hugo server/ ######################### ## hugo server ## hugo server --theme blowfish --bind 0.0.0.0 --port 1313 ## hugo server --theme blowfish --bind 0.0.0.0 --port 1313 --buildDrafts ### -D means --buildDrafts ### windows hugo server一直是用不了1313的原因https://blog.weiqh.net/2022/11/16/Windows-10-%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/ ######################## /4. hugo new/ ######################### # hugo new content blog/my-first-blog.md gitignore 4 hugo # # Hugo resources/ public/ # Hugo themes # themes/blowfish/ # Binaries for programs and plugins *.exe *.exe~ *.dll *.so *.dylib # Test binary, built with `go test -c` *.test # Output of the go coverage tool, specifically when used with LiteIDE *.out # Dependency directories (remove the comment below to include it) # vendor/ # others node_modules .hugo_build.lock # OS generated files .DS_Store .DS_Store? ._* .Spotlight-V100 .Trashes .idea .jampack ","date":"2025年01月07日 15時38分","externalUrl":null,"permalink":"/blog/use-hugo/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e参考 \n    \u003cdiv id=\"%E5%8F%82%E8%80%83\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%8F%82%E8%80%83\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHugo安装\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/440175312\" target=\"_blank\"\u003e零成本搭建个人博客：hugo安装 - 知乎\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/installation/linux/\" target=\"_blank\"\u003eHugo安装官方文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\"\u003eHugo原仓库\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/getting-started/quick-start/\" target=\"_blank\"\u003eHugo使用参考文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e加密\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blog.tantalum.life/posts/encrypted-blog-posts/\" target=\"_blank\"\u003eHugo | 为博客文章添加密码 – Zoe\u0026rsquo;s Dumpster.\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/adityatelange/hugo_enc\" target=\"_blank\"\u003ehugo-enc\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e主题\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blowfish.page/\" target=\"_blank\"\u003eblowfish\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e使用blowfish主题的博客示例\n\u003cul\u003e\n\u003cli\u003e前三个有github参考可以用于参考\u003c/li\u003e\n\u003cli\u003e捣鼓静态博客时在github上抄别人的配置，比费劲巴拉的看教程文档来的舒服。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Ast3risk-ops/website\" target=\"_blank\"\u003eAst3risk-ops/website\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/utrodus/utrodus.com\" target=\"_blank\"\u003e一位印尼前端的博客\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://enoshima-escar.zen96k.mydns.jp/\" target=\"_blank\"\u003e江ノ島エスカー\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ohdmire.github.io/posts/loopcount/#%E6%A4%8D%E6%A0%91%E9%97%AE%E9%A2%98\" target=\"_blank\"\u003e详解程序中循环次数的判断 · Ohdmire\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eGithubActions\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cloud.tencent.com/developer/article/2262171\" target=\"_blank\"\u003e自动部署\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://smc.im/post/deploy-hugo-blog-with-github-actions/\" target=\"_blank\"\u003e使用 Github Actions 自动部署 hugo 博客 | Choi\u0026rsquo;s Notes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://martinlwx.github.io/zh-cn/use-github-actions-to-automate-hugo-build/\" target=\"_blank\"\u003e使用 GitHub Actions 自动化 Hugo 博客部署 - MartinLwx\u0026rsquo;s Blog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.lixueduan.com/posts/blog/01-github-action-deploy-hugo/\" target=\"_blank\"\u003e基于 Github Action 自动构建 Hugo 博客 -\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e问题：\n\u003ca href=\"https://www.bilibili.com/opus/908761972570325045\" target=\"_blank\"\u003eHugo主题blowfish搜索功能失效的解决办法之一 - 哔哩哔哩\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCDN\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.hetong-re4per.com/posts/cdn-for-your-github-page/\" target=\"_blank\"\u003e使用双线 DNS 和 CDN 加速你的 GitHub Page · 瞳のBlog\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHugo和Blowfish使用固定版本如下，方便后面维护\u003c/p\u003e","title":"使用hugo","type":"blog"},{"content":" FrameWork # Typecho 24/1/? # wordpress的精简版本，用docker装容易产生nginx的user:www-data 权限问题，在使用时必须没写完一篇文章就sudo chmod -Rf 777 typecho/一次，其他没有缺点，主题也都不错，主要走简洁风（Handsome开心版）。\n因为权限问题弃用。\nHello Hexo 24/4/14 # 第一个博客在github.io上使用Hexo和GithubActions搭建。\nGithub原生支持的静态博客框架有Jekyll, Hexo, Hugo这三个，其中Hexo使用起来最麻烦，Hugo和Jekyll稍微简单一点。\n这类静态博客使用起来最大的槽点就是主题基本上没有一个比较详细的使用说明，当你 clone一个主题下来后，可以说是开箱不能用🤣，所有关乎到日常使用以及美观的配置都得你自己摸索（甚至直接在github上找别人的配置文件也不保证能100%复现），这也就导致了网上关于静态博客如何配置的教程也是最多的，最奇怪的一点就是为什么作者不能给一个开箱即用的 simple starter再搭配一个接入github评论的 mkdocs让大家来讨论，这就是前端的奇奇怪怪之处吧。\n我尝试过如下几种静博框架的不同主题：\nHexo Butterfly Hugo Blowfish Stack Jekyll tmaize-blog Hello Hugo 24/4/14 # Hugo是我尝试过的三个静态博客框架中，视觉效果最为出色的一个。特别是其中的Blowfish和Stack主题，它们的设计简洁而不失优雅，色调和排版清新现代。Blowfish主题一种类似苹果的背景高斯模糊展示两种层次的背景，Stack有一种说不上来的直观、流畅。\n总之Hugo我很喜欢，但是配置和使用太麻烦了。\n顺带一提，Hugo虽然原生支持markdown，但是如果你要在页面上显示目录的话，只能使用二级及以下的目录，不能使用一级目录撰文。\nHello Wordpress 24/5/? # Wordpress的Sakurairo很好，但是太重了，我的小带宽承受不了。\nHello Halo 24/10/12 # 争议性最大的，彼时的Halo还没有开始收费，其在12月份宣布启用专业版收费，价格相当高，960买断才能使用应用市场中的插件。\n抛开争议话题不谈，Halo本身做的还是很优秀的，较低的内存占用和较快的响应速度、不算丑的外观、简单的docker部署、两键将备份打包迁移到新网站，这些优点是许多用户选择它的理由，对比停更几年的Typecho和高占用的Wp，让人很难不选择Halo。\nDeployMent # 旅游地图 24/11/1 # 偶尔看看部署的这个小玩具，可以想起旅游的快乐时光。\nNas导航 24/11/1 # copy一个学弟的导航页，用来重定向到我的nas服务。\nPhoto by Xiaomi 14 Transfer # 博客迁移 25/1/23 # 其实更早，大概在25/1/11左右就已经迁移到家里的服务器上了。\n因为没有给80和443端口，所以只能用端口访问了😭。\n","date":"2025年01月04日 15時38分","externalUrl":null,"permalink":"/blog/blog-history/","section":"","summary":"\u003ch2 class=\"relative group\"\u003eFrameWork \n    \u003cdiv id=\"framework\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#framework\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\n\u003ch3 class=\"relative group\"\u003eTypecho 24/1/? \n    \u003cdiv id=\"typecho-241\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#typecho-241\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003ewordpress的精简版本，用docker装容易产生\u003ccode\u003enginx的user:www-data\u003c/code\u003e 权限问题，在使用时必须没写完一篇文章就\u003ccode\u003esudo chmod -Rf 777 typecho/\u003c/code\u003e一次，其他没有缺点，主题也都不错，主要走简洁风（Handsome开心版）。\u003c/p\u003e","title":"Blog History","type":"blog"},{"content":"备用博客 (防止github page挂了)\n学生\n绝望南通人 斗破苍穹/JUMP/阿梓 Recent Posts GNN中的scatter离散运算 2025年04月21日 20時25分\u0026middot;1164 字 Miniforge：Conda solving enviroment终结者 2025年03月19日 22時00分\u0026middot;1308 字 24年年终总结 2025年03月18日 07時00分\u0026middot;2220 字 Git 清除.git仓库历史记录中的高占用内存文件 2025年02月28日 22時15分\u0026middot;872 字 数据清洗 2025年02月09日 15時38分\u0026middot;2060 字 All Posts ","externalUrl":null,"permalink":"/","section":"","summary":"\u003cp\u003e\u003ca href=\"https://you.aoidayo.site:1024/\" target=\"_self\"\u003e备用博客\u003c/a\u003e (防止github page挂了)\u003cbr\u003e\u003c/p\u003e\n\u003c!-- \u003ch3 style='color:#CBD5E1'\u003e --\u003e\n\u003ch3 id=\"typeit-6fb22d3943ec7794c447a8e7c1bb77a4\"\u003e\u003c/h3\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-6fb22d3943ec7794c447a8e7c1bb77a4\", {\n        strings: [\"\",\"どうして君が泣くの\",\"まだ仆も泣いていないのに\",\"自分より 悲しむから\",\"つらいのがどっちか わからなくなるよ\",\"\"],\n        speed:  300 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  false ,\n        waitUntilVisible:  true ,\n        loop:  true \n      }).go();\n    });\n\u003c/script\u003e\n\u003cblockquote\u003e\n\u003c!-- \u003c/h3\u003e --\u003e\u003c/blockquote\u003e\n\u003cdiv\u003e\n学生\u003cbr\u003e\n绝望南通人 \u003cbr\u003e\n\u003ca href='https://book.qidian.com/info/1209977/' target=\"_blank\"\u003e斗破苍穹\u003c/a\u003e/JUMP/\u003ca href=\"https://space.bilibili.com/7706705\" target=\"_blank\"\u003e阿梓\u003c/a\u003e \u003cbr\u003e\n\u003c/div\u003e\n\u003c!-- \u003ca\n  class=\"!rounded-md bg-primary-600 px-4 py-2 !text-neutral !no-underline hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"\n  href=\"/posts\"\n  target=\"_self\"\n  \n  role=\"button\"\n\u003e\n  \nPosts\n\n\u003c/a\u003e\n --\u003e\n\u003c!-- \u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  :wave: Hi there!\n\u003c/div\u003e\n --\u003e\n\u003c!-- I game too much. I also write words onto this site sometimes.  --\u003e\n\u003c!-- \u003cthe-fold\u003e\u003c/the-fold\u003e --\u003e\n\n\n\n\n\n\n\n\u003ch2 class=\"mt-20 text-2xl font-extrabold mb-10\"\u003eRecent Posts\u003c/h2\u003e\n\n\n\n\n\u003csection class=\"space-y-10 w-full mt-10 mb-10\"\u003e\n    \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/scatter-in-gnn/\"\u003e\n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/blog/scatter-in-gnn/feature_hu_47f2abba3d20b950.jpeg);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/scatter-in-gnn/\"\u003eGNN中的scatter离散运算\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-04-21T20:25:21\u0026#43;08:00\"\u003e2025年04月21日 20時25分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e1164 字\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/conda-or-mamba/\"\u003e\n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/blog/conda-or-mamba/feature_hu_141c6d4525a6d5fa.png);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/conda-or-mamba/\"\u003eMiniforge：Conda solving enviroment终结者\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-03-19T22:00:16\u0026#43;08:00\"\u003e2025年03月19日 22時00分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e1308 字\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/24-sum/\"\u003e\n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/blog/24-sum/feature_hu_9454fddbb29a7617.jpg);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/24-sum/\"\u003e24年年终总结\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-03-18T07:00:16\u0026#43;08:00\"\u003e2025年03月18日 07時00分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e2220 字\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/git-big/\"\u003e\n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/blog/git-big/feature_hu_e68d29da6e8382f2.png);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/git-big/\"\u003eGit 清除.git仓库历史记录中的高占用内存文件\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-02-28T22:15:00\u0026#43;08:00\"\u003e2025年02月28日 22時15分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e872 字\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/report/raw-data-process/\"\u003e\n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/report/raw-data-process/feature_hu_c2450aceb26f3b27.png);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/report/raw-data-process/\"\u003e数据清洗\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-02-09T15:38:16\u0026#43;08:00\"\u003e2025年02月09日 15時38分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e2060 字\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n    \n\u003c/section\u003e\n\n\n\n\u003ca\n  class=\"!rounded-md bg-primary-600 px-4 py-2 !text-neutral !no-underline hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"\n  href=\"/blog\"\n  target=\"_self\"\n  \n  role=\"button\"\n\u003e\n  \nAll Posts\n\n\u003c/a\u003e","title":"","type":"page"},{"content":"博客写在这里哦。\n","externalUrl":null,"permalink":"/blog/","section":"","summary":"\u003cp\u003e博客写在这里哦。\u003c/p\u003e","title":"","type":"blog"},{"content":"上课或者组会报告\n","externalUrl":null,"permalink":"/report/","section":"","summary":"\u003cp\u003e上课或者组会报告\u003c/p\u003e","title":"","type":"report"}]