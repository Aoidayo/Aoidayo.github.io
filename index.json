
[{"content":"","date":"2025年10月17日 12時42分","externalUrl":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"2025年10月17日 12時42分","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025年10月17日 12時42分","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025年10月17日 12時42分","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":" 1 / Windows 包管理 # scoop # scoop 多开发环境配置使用教程：Scoop 搭建 Windows 开发环境 | 潇然工作室 scoop 必不可少的一环：如何使用 (63 封私信 / 82 条消息) Scoop——也许是 Windows 平台最好用的软件（包）管理器 - 知乎 Scoop | Windows 下的软件包管理神器 - 苏青羽的小窝 官网：Scoop windows 的包管理器之一，使用它下载一些比较轻量的软件/命令行工具、以及一些开发环境（类似 Debian 的 apt / brew）。\n前置准备 # Scoop 是一个 PowerShell 工具，需要：\nWindows 10 / 11 PowerShell 5.1 或更高（默认都有）,最好使用 PowerShell7 可联网（最好能访问 GitHub） 建议关闭 UAC（User Account Control） 弹窗（Scoop 默认装在用户目录，无需管理员权限） 安装 # pre\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser （1）默认安装 （自动放在 C:\\Users\\\u0026lt;你\u0026gt;\\scoop） 直接打开 PowerShell（非管理员），执行：\niwr -useb get.scoop.sh | iex 执行后，你可以运行：\nscoop --version 确认安装成功。\n（2）自定义安装目录 （推荐） 如果你想把所有软件放在自定义目录下面比如 D:\\Apps\\Scoop，则需要添加环境变量\nsetx SCOOP \u0026#34;D:\\Apps\\Scoop\u0026#34; /M iwr -useb get.scoop.sh | iex 安装后，所有 Scoop 软件会放在：\nD:\\Apps\\Scoop\\apps\\\u0026lt;软件名\u0026gt;\\current\\ 非常干净，不污染系统盘。\n🔺setx 不加/m 表示用户变量，加上就是系统变量\n安装完成后，scoop 文件夹下面的结构\napps——所有通过 scoop 安装的软件都在里面。 buckets——管理软件的仓库，用于记录哪些软件可以安装、更新等信息，默认添加main仓库，主要包含无需 GUI 的软件，可手动添加其他仓库或自建仓库，具体在推荐软件仓库中介绍。 cache——软件下载后安装包暂存目录。 persit——用于储存一些用户数据，不会随软件更新而替换。 shims——用于软链接应用，使应用之间不会互相干扰，实际使用过程中无用户操作不必细究。 添加代理 # 设置 scoop 的代理\nscoop config proxy 127.0.0.1:7890 # clash verge rev是7897 或者直接找到 Scoop 配置文件，路径 C:\\Users\\username\\.config\\scoop\\config.json，然后直接修改里面的配置。\n取消代理\nscoop config rm proxy 配置 Aria2 下载 # 使用 Scoop 安装 Aria2 ，Scoop 会自动调用 Aria2 进行多线程加速下载。安装完会自动启用.\nscoop install aria2 scoop config aria2-warning-enabled false 与 Aria2 有关的设置选项：\naria2-enabled: 开启 Aria2 下载，默认true aria2-retry-wait: 重试等待秒数，默认2 aria2-split: 单任务最大连接数，默认5 aria2-max-connection-per-server: 单服务器最大连接数，默认5 ，最大16 aria2-min-split-size: 最小文件分片大小，默认5M 优化 Aria2 设置，单任务最大连接数设置为 32，单服务器最大连接数设置为 16，最小文件分片大小设置为 1M ### aria2 在 Scoop 中默认开启 scoop config aria2-enabled true ### 关于以下参数的作用，详见aria2的相关资料 scoop config aria2-retry-wait 4 scoop config aria2-split 16 scoop config aria2-max-connection-per-server 16 scoop config aria2-min-split-size 4M 因为 Scoop 默认的 TLS1.0/1.1 这两个协议已经被 github 禁用，这里需要配置现代 TLS 协议才能通过 HTTPS 连接下载。\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 配置 sudo 打开管理员模式 # 使用 Scoop 安装 sudo ，如果要用管理员运行命令,无需用管理员打开 cmd(or powershell) 直接在命令行前加一个 sudo 即可。\nscoop install sudo 测试：\nsudo setx testForSudo \u0026#34;C:/\u0026#34; $env:testForSudo sudo [Environment]::SetEnvironmentVariable(\u0026#39;testForSudo\u0026#39;, $null, \u0026#39;Machine\u0026#39;) $env:testForSudo 添加 buckets # 添加 buckets 之前，需要有 git 和 7zip\nscoop install git # 这段命令会连带下载7zip 1、添加整合 buckets kkzzhizhou/scoop-apps: 使用 Github Action 每天自动合并其他 scoop 仓库的更新，仓库地址：https://github.com/kkzzhizhou/scoop-apps\nscoop bucket add apps https://github.com/kkzzhizhou/scoop-apps 2、添加dorado\nscoop bucket add dorado https://github.com/chawyehsu/dorado 所有的包管理器都会有相应的软件仓库 ，而 bucket 就是 Scoop 中的软件仓库。细心的你可能会发现 scoop 翻译为中文是 “舀”，而 bucket 是 “水桶”，所以安装软件可以理解为从水桶里舀水，似乎很形象的说。 Scoop 默认软件仓库（main bucket）软件数量是有限的，但是可以进行额外的添加。\nscoop bucket list 查看当前已经添加的 bucekt\n✗ scoop bucket list Name Source Updated Manifests ---- ------ ------- --------- main https://github.com/ScoopInstaller/Main.git 2025/10/16 8:38:16 1406 extras https://github.com/ScoopInstaller/Extras 2025/10/16 8:39:16 2197 apps https://github.com/kkzzhizhou/scoop-apps 2025/10/15 12:40:54 14810 基本使用 # basic\nsearch # 搜索仓库中是否有相应软件。 install # 安装软件。 uninstall # 卸载软件。 update # 更新软件。可通过scoop update *更新所有已安装软件，或通过scoop update更新所有软件仓库资料及Scoop自身而不更新软件。 hold # 锁定软件阻止其更新。 info # 查询软件简要信息。 home # 打开浏览器进入软件官网。 help # 帮助 More\u0026hellip;\nalias Manage scoop aliases bucket Manage Scoop buckets cache Show or clear the download cache cat Show content of specified manifest. checkup Check for potential problems cleanup Cleanup apps by removing old versions config Get or set configuration values create Create a custom app manifest depends List dependencies for an app export Exports (an importable) list of installed apps help Show help for a command hold Hold an app to disable updates home Opens the app homepage info Display information about an app install Install apps list List installed apps prefix Returns the path to the specified app reset Reset an app to resolve conflicts search Search available apps status Show status and check for new app versions unhold Unhold an app to enable updates uninstall Uninstall an app update Update apps, or Scoop itself virustotal Look for app\u0026#39;s hash on virustotal.com which Locate a shim/executable (similar to \u0026#39;which\u0026#39; on Linux) 例子 以下载 hugo 为例\n# hugo信息 scoop info hugo # hugo 指定版本 scoop install hugo@0.140.2 # 当前已经安装的hugo版本，可能只会显示一个 scoop list hugo # 再次下载一个hugo scoop install hugo@0.151.1 scoop reset hugo@0.140.2 以文件夹符号链接的方式，引用当前使用的 hugo 版本： 删除旧版本软件，scoop 更新软件不会将旧版移除，只是将创建一个链接指向新版本。\n清理包缓存 Scoop 会保留下载的安装包，对于卸载后又想再安装的情况，不需要重复下载。但长期累积会占用大量的磁盘空间，如果用不到就成了垃圾。这时可以使用 scoop cache 命令来清理。\n`scoop cache show` - 显示安装包缓存 `scoop cache rm *` - 删除所有的安装包缓存 如果不希望安装和更新软件时保留安装包缓存，可以加上 -k\nscoop install -k \u0026lt;app\u0026gt; scoop update -k * 安装失败时的处理\n# 删除损坏的安装 scoop uninstall miniforge --purge # 管理员模式安装 sudo scoop install miniforge 如何卸载 # scoop uninstall scoop 卸载后重新安装会出现问题\n\u0026gt; iwr -useb get.scoop.sh | iex Initializing... Scoop is already installed. Run \u0026#39;scoop update\u0026#39; to get the latest version 默认安装路径在 $env:userprofile 下面的 scoop 文件夹中，先删除这个文件夹\n环境配置 # python | miniforge # sudo scoop install miniforge 安装完成后的 Note：\nThis variant does not add the default venv into your PATH unless you activate it with \u0026#39;conda activate base\u0026#39;. You may choose to install the one from the official bucket if you do not care about python PATH pollution. Conda base env is not persisted by Scoop, packages installed to the base env will be removed when upgrading the app. We advice to setup \u0026#39;envs_dirs\u0026#39; to use a seperated path like \u0026#39;~/.conda/envs\u0026#39; and avoid using the base env. https://conda.io/projects/conda/en/latest/user-guide/configuration/use-condarc.html#specify-environment-directories-envs-dirs To enable conda tab-completion autoload, you can add the following code to your PowerShell $PROFILE: (\u0026amp; conda \u0026#39;shell.powershell\u0026#39; \u0026#39;hook\u0026#39;) | Out-String | Invoke-Expression 意思就是：\n没有添加 miniforge 的 env 到你的 path 中，但是因为 scoop/shims 已经将软链接 conda 添加，在使用 conda init 后可以直接使用 conda activate base 激活环境 自动补全开启：(\u0026amp; conda 'shell.powershell' 'hook') | Out-String | Invoke-Expression，把 conda hook 的输出加载进当前 PowerShell 环境。 condainit 后会向 profile 中写入脏东西，启动速度优化可以转向 PowerShell 升级。\napp list # ➜ scoop list Installed apps: Name Version Source Updated Info ---- ------- ------ ------- ---- 7zip 25.01 main 2025-10-11 12:01:05 aria2 1.37.0-1 main 2025-10-16 09:54:49 colortool 1904.29002 main 2025-10-12 11:30:19 dark 3.14.1 main 2025-10-13 10:00:38 docker-desktop nightly-20251011 apps 2025-10-11 15:37:06 hugo 0.140.2 \u0026lt;auto-generated\u0026gt; 2025-10-16 10:17:26 neofetch 7.1.0 main 2025-10-17 10:36:27 powershell 7.5.3 apps 2025-10-11 16:41:03 powertoys 0.94.2 extras 2025-10-13 10:02:39 qqmusic 2025-10-11 15:40:07 Install failed qqmusic_akirco 21.92 apps 2025-10-11 15:40:41 starship 1.23.0 main 2025-10-12 11:41:57 sudo 0.2020.01.26 main 2025-10-16 10:00:15 tre-command 0.4.0 main 2025-10-11 11:45:48 scoop-list-all 的 powershell 函数 # function Scoop-ListAll { param( [Parameter(Mandatory = $true)] [string]$App ) $appPath = \u0026#34;$env:scoop\\apps\\$App\u0026#34; if (-not (Test-Path $appPath)) { Write-Host \u0026#34;❌ 未找到 Scoop 应用 \u0026#39;$App\u0026#39;\u0026#34; -ForegroundColor Red return } $versions = Get-ChildItem -Path $appPath -Directory | Select-Object -ExpandProperty Name if ($versions.Count -eq 0) { Write-Host \u0026#34;⚠️ 未找到已安装的版本。\u0026#34; return } # 检查 current 链接 $currentLink = (Get-Item \u0026#34;$appPath\\current\u0026#34; -ErrorAction SilentlyContinue) $currentTarget = $null if ($currentLink -and $currentLink.LinkType -eq \u0026#34;SymbolicLink\u0026#34;) { $currentTarget = Split-Path $currentLink.Target -Leaf } Write-Host \u0026#34;📦 $App 已安装的版本：\u0026#34; -ForegroundColor Cyan foreach ($v in $versions) { if ($v -eq \u0026#34;current\u0026#34;) { continue } if ($v -eq $currentTarget) { Write-Host \u0026#34; → $v (当前启用)\u0026#34; -ForegroundColor Green } else { Write-Host \u0026#34; $v\u0026#34; } } } 打开 profile，将这个函数加进去，重启 ps 后直接使用\nnotepad $PROFILE 使用\n➜ scoop-listall hugo 📦 hugo 已安装的版本： 0.140.2 0.151.1 ➜ scoop list hugo Installed apps matching \u0026#39;hugo\u0026#39;: Name Version Source Updated Info ---- ------- ------ ------- ---- hugo 0.140.2 \u0026lt;auto-generated\u0026gt; 2025-10-16 10:17:26 2 / Windows 终端优化 # Windows Terminal # 在 github Windows Terminal 或者微软商店页面搜索下载即可。 Windows Terminal 有更加优雅的现代化界面和终端统一管理功能。\nPowerShell 升级 # 1、首先查看 powershell 的版本\n$Host.Version $psversiontable pwsh --version 得到\nMajor Minor Build Revision ----- ----- ----- -------- 5 1 19041 1320 分别是「主版本.次版本.构建版本.修订版本」\npowershell 的命令不区分大小写，驼峰式写法只是为了更可读。\n2、使用 scoop 升级 powershell\nscoop install powershell 3、启用 powershell 在启动处将其设置为默认配置文件\n启动速度优化 # 1、查看 PowerShell 配置文件 PowerShell 会在启动时按顺序加载不同配置文件： $PROFILE | Format-List * -Force 输出类似：\nAllUsersAllHosts : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1 AllUsersCurrentHost : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Microsoft.PowerShell_profile.ps1 CurrentUserAllHosts : C:\\Users\\YourUser\\Documents\\PowerShell\\profile.ps1 CurrentUserCurrentHost : C:\\Users\\YourUser\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1 💡 解释：\nAllUsersAllHosts：对所有用户和所有宿主有效 CurrentUserCurrentHost：只对当前用户和当前宿主（比如 Windows Terminal）有效 默认只要存在，PowerShell 就会尝试加载它们 你可以直接用 Notepad 打开它们：\nPS C:\\Users\\tohsaka rin\u0026gt; $PROFILE | Format-List * -Force AllUsersAllHosts : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1 AllUsersCurrentHost : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Microsoft.PowerShell_profile.ps1 CurrentUserAllHosts : C:\\Users\\tohsaka rin\\Documents\\WindowsPowerShell\\profile.ps1 CurrentUserCurrentHost : C:\\Users\\tohsaka rin\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 Length : 81 PS C:\\Users\\tohsaka rin\u0026gt; notepad $profile.AllUsersAllHosts PS C:\\Users\\tohsaka rin\u0026gt; Test-Path $PROFILE.AllUsersCurrentHost False PS C:\\Users\\tohsaka rin\u0026gt; Test-Path $PROFILE.CurrentUserAllHosts PS C:\\Users\\tohsaka rin\u0026gt; Test-Path $PROFILE.CurrentUserAllHosts True 2、修改 conda 的配置 参考解决 conda init 后启动 powershell 速度慢的问题 - 知乎 conda init 后启动 powershell 速度慢的问题：\n在 PowerShell 中输入(路径替换为自己真实的路径)\n(\u0026amp; \u0026#34;C:\\path\\to\\conda\\Scripts\\conda.exe\u0026#34; \u0026#34;shell.powershell\u0026#34; \u0026#34;hook\u0026#34;) | Out-String 将输出的文本贴到 profile.ps1​ 中（将 username 替换为实际的用户名）\n$Env:CONDA_EXE = \u0026#34;C:\\Users\\username\\miniconda3\\Scripts\\conda.exe\u0026#34; $Env:_CONDA_ROOT = \u0026#34;C:\\Users\\username\\miniconda3\u0026#34; $Env:_CONDA_EXE = \u0026#34;C:\\Users\\username\\miniconda3\\Scripts\\conda.exe\u0026#34; $CondaModuleArgs = @{ChangePs1 = $True } Import-Module \u0026#34;$Env:_CONDA_ROOT\\shell\\condabin\\Conda.psm1\u0026#34; -ArgumentList $CondaModuleArgs conda activate base Remove-Variable CondaModuleArgs 最好删除 conda activate base​，并使用 conda config \u0026ndash;set auto_activate_base false​ 禁用自动激活 如果 conda config \u0026ndash;set auto_activate_base false​ 提示无权限，则直接去 C:\\Users\\username​（username 替换)下找到.condarc​ 文件加入如下代码\nauto_activate_base: false ‍\n自动补全 # 1、自动补全 这里输入 h，向右即可自动补全 2、开启补全配置\nSet-PSReadLineKeyHandler -Key Tab -Function MenuComplete Set-PSReadLineKeyHandler -Key Tab -Function Complete 这两个函数的作用分别是：\nMenuComplete：当有多个匹配项时，会显示一个交互式菜单列表。 Complete：直接补全到唯一的匹配项。 如果需要全局生效，则需要加入$profile中\n3、重新加载 PSReadLine 在 PowerShell 7.4 中，你可以通过以下步骤来重新加载 PSReadLine 模块：\n首先，你需要确保 PSReadLine 模块已经安装。你可以通过运行 Get-Module -ListAvailable PSReadLine 命令来检查 PSReadLine 模块是否已经安装。 如果 PSReadLine 模块已经安装，你可以通过运行 Remove-Module PSReadLine 命令来卸载当前加载的 PSReadLine 模块。 3，然后，你可以通过运行 Import-Module PSReadLine 命令来重新加载 PSReadLine 模块。 starship 美化 # 1、下载 nerd 字体\nnerd 字体推荐下载 jetbrainsmono nerd font nerd 字体 cheat sheet：Nerd Fonts - Iconic font aggregator, glyphs/icons collection, \u0026amp; fonts patcher 只安装 mono\n. ├── JetBrainsMonoNerdFontMono-Bold.ttf ├── JetBrainsMonoNerdFontMono-BoldItalic.ttf ├── JetBrainsMonoNerdFontMono-ExtraBold.ttf ├── JetBrainsMonoNerdFontMono-ExtraBoldItalic.ttf ├── JetBrainsMonoNerdFontMono-ExtraLight.ttf ├── JetBrainsMonoNerdFontMono-ExtraLightItalic.ttf ├── JetBrainsMonoNerdFontMono-Italic.ttf ├── JetBrainsMonoNerdFontMono-Light.ttf ├── JetBrainsMonoNerdFontMono-LightItalic.ttf ├── JetBrainsMonoNerdFontMono-Medium.ttf ├── JetBrainsMonoNerdFontMono-MediumItalic.ttf ├── JetBrainsMonoNerdFontMono-Regular.ttf ├── JetBrainsMonoNerdFontMono-SemiBold.ttf ├── JetBrainsMonoNerdFontMono-SemiBoldItalic.ttf ├── JetBrainsMonoNerdFontMono-Thin.ttf └── JetBrainsMonoNerdFontMono-ThinItalic.ttf 2、scoop 安装\nscoop install starship 3、初始化 （1）使用 powershell，运行 $PROFILE，记住这个路径，并进入这个路径（如果没有这个路径就创建） 在这个路径下的 Microsoft.PowerShell_profile.ps1 中加入\nInvoke-Expression (\u0026amp;starship init powershell) 重启终端即可\n（2）或者\nPS C:\\Users\\tohsaka rin\u0026gt; starship init powershell Invoke-Expression (\u0026amp; \u0026#39;D:\\software\\scoop\\shims\\starship.exe\u0026#39; init powershell --print-full-init | Out-String) PS C:\\Users\\tohsaka rin\u0026gt; notepad $profile 4、配置 config\n\u0026#34;$schema\u0026#34; = \u0026#39;https://starship.rs/config-schema.json\u0026#39; format = \u0026#34;\u0026#34;\u0026#34; [](color_orange)\\ $os\\ $username\\ $hostname\\ [](bg:color_yellow fg:color_orange)\\ $directory\\ [](fg:color_yellow bg:color_aqua)\\ $git_branch\\ $git_status\\ [](fg:color_aqua bg:color_blue)\\ $c\\ $cpp\\ $rust\\ $golang\\ $nodejs\\ $php\\ $java\\ $kotlin\\ $haskell\\ $python\\ [](fg:color_blue bg:color_bg3)\\ $docker_context\\ $conda\\ $pixi\\ [](fg:color_bg3 bg:color_bg1)\\ $time\\ [ ](fg:color_bg1)\\ $line_break$character\u0026#34;\u0026#34;\u0026#34; palette = \u0026#39;gruvbox_dark\u0026#39; [palettes.gruvbox_dark] color_fg0 = \u0026#39;#fbf1c7\u0026#39; color_bg1 = \u0026#39;#3c3836\u0026#39; color_bg3 = \u0026#39;#665c54\u0026#39; color_blue = \u0026#39;#458588\u0026#39; color_aqua = \u0026#39;#689d6a\u0026#39; color_green = \u0026#39;#98971a\u0026#39; color_orange = \u0026#39;#d65d0e\u0026#39; color_purple = \u0026#39;#b16286\u0026#39; color_red = \u0026#39;#cc241d\u0026#39; color_yellow = \u0026#39;#d79921\u0026#39; color_font = \u0026#39;#FBF1C7\u0026#39; color_font_app = \u0026#39;#FBF1C7\u0026#39; [palettes.sakura_night_stars] color_fg0 = \u0026#39;#fbf1c7\u0026#39; # 柔和温暖的白色（明亮前景色） color_bg1 = \u0026#39;#2e1a47\u0026#39; # 深紫色，像夜空 color_bg3 = \u0026#39;#3a2d56\u0026#39; # 深紫色的阴影 color_blue = \u0026#39;#7a4d97\u0026#39; # 柔和梦幻的蓝色，像星辰 color_aqua = \u0026#39;#b4e0d9\u0026#39; # 轻盈的水绿色，像月光的反射 color_green = \u0026#39;#a8d8a5\u0026#39; # 淡绿色，像樱花的叶子 color_orange = \u0026#39;#f8a89f\u0026#39; # 柔和的粉橙色，像樱花花瓣 color_purple = \u0026#39;#c5a0e2\u0026#39; # 浅紫色，像暮光的色调 color_red = \u0026#39;#e5856e\u0026#39; # 淡珊瑚红色，像黎明的第一缕阳光 color_yellow = \u0026#39;#f2d97e\u0026#39; # 浅黄色，像远处星星的微光 color_font = \u0026#39;#FBF1C7\u0026#39; # 明亮的白色字体，便于阅读 color_font_app = \u0026#39;#FBF1C7\u0026#39; # 应用程序中一致的明亮字体 [palettes.sakura_night_stars_pink_deep] color_fg0 = \u0026#39;#fbf1c7\u0026#39; # 明亮的白色字体，确保可读性 color_bg1 = \u0026#39;#1e0d2b\u0026#39; # 深紫黑色背景，增强对比度 color_bg3 = \u0026#39;#3e1f4b\u0026#39; # 深紫粉色，适合高对比度的环境 color_blue = \u0026#39;#7a4d97\u0026#39; # 梦幻蓝色，适合星辰的点缀 color_aqua = \u0026#39;#f1c8d1\u0026#39; # 粉蓝色，像月光 color_green = \u0026#39;#f0b8c4\u0026#39; # 淡粉绿，增强柔和感 color_orange = \u0026#39;#f4b7d6\u0026#39; # 柔和粉橙色，清新又不刺眼 color_purple = \u0026#39;#d08fc7\u0026#39; # 深粉紫色，提升深度和对比感 color_red = \u0026#39;#f56b8a\u0026#39; # 深粉红色，强调点缀 color_yellow = \u0026#39;#f2d39b\u0026#39; # 浅黄色，星光点缀 color_font = \u0026#39;#FBF1C7\u0026#39; # 明亮的白色字体，便于阅读 color_font_app = \u0026#39;#FBF1C7\u0026#39; # 一致的白色字体应用 [os] disabled = false style = \u0026#34;bg:color_orange fg:color_fg0\u0026#34; [os.symbols] Windows = \u0026#34;\u0026#34; Ubuntu = \u0026#34;󰕈\u0026#34; SUSE = \u0026#34;\u0026#34; Raspbian = \u0026#34;󰐿\u0026#34; Mint = \u0026#34;󰣭\u0026#34; Macos = \u0026#34;󰀵\u0026#34; Manjaro = \u0026#34;\u0026#34; Linux = \u0026#34;󰌽\u0026#34; Gentoo = \u0026#34;󰣨\u0026#34; Fedora = \u0026#34;󰣛\u0026#34; Alpine = \u0026#34;\u0026#34; Amazon = \u0026#34;\u0026#34; Android = \u0026#34;\u0026#34; Arch = \u0026#34;󰣇\u0026#34; Artix = \u0026#34;󰣇\u0026#34; EndeavourOS = \u0026#34;\u0026#34; CentOS = \u0026#34;\u0026#34; Debian = \u0026#34;󰣚\u0026#34; Redhat = \u0026#34;󱄛\u0026#34; RedHatEnterprise = \u0026#34;󱄛\u0026#34; Pop = \u0026#34;\u0026#34; [username] show_always = true style_user = \u0026#34;bg:color_orange fg:color_fg0\u0026#34; style_root = \u0026#34;bg:color_orange fg:color_fg0\u0026#34; format = \u0026#39;[ $user]($style)\u0026#39; [hostname] disabled = false ssh_only = false ssh_symbol = \u0026#34;🌏 \u0026#34; style = \u0026#34;bold green\u0026#34; # [[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style) # format = \u0026#34;[ @$hostname ]($style)\u0026#34; format = \u0026#34;[[@$hostname](fg:color_font bg:color_orange)]($style)\u0026#34; trim_at = \u0026#34;.companyname.com\u0026#34; [directory] style = \u0026#34;fg:color_fg0 bg:color_yellow\u0026#34; format = \u0026#34;[ $path ]($style)\u0026#34; truncation_length = 3 truncation_symbol = \u0026#34;…/\u0026#34; [directory.substitutions] \u0026#34;Documents\u0026#34; = \u0026#34;󰈙 \u0026#34; \u0026#34;Downloads\u0026#34; = \u0026#34; \u0026#34; \u0026#34;Music\u0026#34; = \u0026#34;󰝚 \u0026#34; \u0026#34;Pictures\u0026#34; = \u0026#34; \u0026#34; \u0026#34;Developer\u0026#34; = \u0026#34;󰲋 \u0026#34; [git_branch] symbol = \u0026#34;\u0026#34; style = \u0026#34;bg:color_aqua\u0026#34; format = \u0026#39;[[ $symbol $branch ](fg:color_fg0 bg:color_aqua)]($style)\u0026#39; [git_status] style = \u0026#34;bg:color_aqua\u0026#34; format = \u0026#39;[[($all_status$ahead_behind )](fg:color_fg0 bg:color_aqua)]($style)\u0026#39; [nodejs] symbol = \u0026#34;\u0026#34; style = \u0026#34;bg:color_blue\u0026#34; format = \u0026#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)\u0026#39; [c] symbol = \u0026#34; \u0026#34; style = \u0026#34;bg:color_blue\u0026#34; format = \u0026#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)\u0026#39; [cpp] symbol = \u0026#34; \u0026#34; style = \u0026#34;bg:color_blue\u0026#34; format = \u0026#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)\u0026#39; [rust] symbol = \u0026#34;\u0026#34; style = \u0026#34;bg:color_blue\u0026#34; format = \u0026#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)\u0026#39; [golang] symbol = \u0026#34;\u0026#34; style = \u0026#34;bg:color_blue\u0026#34; format = \u0026#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)\u0026#39; [php] symbol = \u0026#34;\u0026#34; style = \u0026#34;bg:color_blue\u0026#34; format = \u0026#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)\u0026#39; [java] symbol = \u0026#34;\u0026#34; style = \u0026#34;bg:color_blue\u0026#34; format = \u0026#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)\u0026#39; [kotlin] symbol = \u0026#34;\u0026#34; style = \u0026#34;bg:color_blue\u0026#34; format = \u0026#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)\u0026#39; [haskell] symbol = \u0026#34;\u0026#34; style = \u0026#34;bg:color_blue\u0026#34; format = \u0026#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)\u0026#39; [python] symbol = \u0026#34;\u0026#34; style = \u0026#34;bg:color_blue\u0026#34; format = \u0026#39;[[ $symbol( $version) ](fg:color_fg0 bg:color_blue)]($style)\u0026#39; [docker_context] symbol = \u0026#34;\u0026#34; style = \u0026#34;bg:color_bg3\u0026#34; format = \u0026#39;[[ $symbol( $context) ](fg:#83a598 bg:color_bg3)]($style)\u0026#39; [conda] # style = \u0026#34;bg:color_bg3\u0026#34; # format = \u0026#39;[[ $symbol( $environment) ](fg:#83a598 bg:color_bg3)]($style)\u0026#39; style = \u0026#34;green bold\u0026#34; # symbol = \u0026#34;󱔎\u0026#34; symbol = \u0026#34;env:\u0026#34; # \u0026#34;[[ @$hostname](fg:color_yellow bg:color_orange)]($style)\u0026#34; format = \u0026#39;[[ $symbol( $environment) ](fg:color_font_app bg:color_bg3)]($style)\u0026#39; ignore_base = false [pixi] style = \u0026#34;bg:color_bg3\u0026#34; format = \u0026#39;[[ $symbol( $version)( $environment) ](fg:color_fg0 bg:color_bg3)]($style)\u0026#39; [time] disabled = false time_format = \u0026#34;%R\u0026#34; style = \u0026#34;bg:color_bg1\u0026#34; format = \u0026#39;[[  $time ](fg:color_fg0 bg:color_bg1)]($style)\u0026#39; [line_break] disabled = false [character] disabled = false format = \u0026#34;$symbol \u0026#34; success_symbol = \u0026#39;[➜](bold fg:color_green)\u0026#39; error_symbol = \u0026#39;[✗](bold fg:color_red)\u0026#39; vimcmd_symbol = \u0026#39;[](bold fg:color_green)\u0026#39; vimcmd_replace_one_symbol = \u0026#39;[](bold fg:color_purple)\u0026#39; vimcmd_replace_symbol = \u0026#39;[](bold fg:color_purple)\u0026#39; vimcmd_visual_symbol = \u0026#39;[](bold fg:color_yellow)\u0026#39; # error_symbol = \u0026#34;[✗](fg:red)\u0026#34; # success_symbol = \u0026#34;[](fg:green)\u0026#34; 命令行增强 # 命令行之前，可以先在 Microsoft Learn 上认识一下基本的 windows 命令 Windows commands | Microsoft Learn cd | Microsoft Learn 以 cd 为例，需要切换驱动器需要加上 /d Learn 上推荐的一些 cl 工具 Sysinternals 实用工具 - Sysinternals | Microsoft Learn psping，替换 ping 命令 iperf，测试双向网速 没有被推荐的一些 cl 工具 tree 命令替换 dduan/tre: 改进版的 Tree 命令。 \u0026mdash; dduan/tre: Tree command, improved. tre -d -l 1 . -d 只显示目录，-l 限定深度 x-cmd x-cmd # windows 下 1、安装\n[System.Text.Encoding]::GetEncoding(\u0026#34;utf-8\u0026#34;).GetString($(Invoke-WebRequest -Uri \u0026#34;https://get.x-cmd.com/x-cmd.ps1\u0026#34;).RawContentStream.ToArray()) | Invoke-Expression 2、使用\nx tping 192.168.10.4 23 wsl 下\neval \u0026#34;$(curl https://get.x-cmd.com)\u0026#34; 3 / wsl 配置 # Windows SSH 配置 # 1、安装 openssh 1.1) Powershell 打开 PowerShell（管理员），输入：\nGet-WindowsCapability -Online | Where-Object Name -like \u0026#39;OpenSSH*\u0026#39; 输出中 OpenSSH\nName : OpenSSH.Client~~~~0.0.1.0 State : Installed Name : OpenSSH.Server~~~~0.0.1.0 State : NotPresent 如果 State 是 NotPresent → 还没安装 如果 Installed → 已安装 如果 OpenSSH.Server 没有安装，就安装：\nAdd-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0 Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 安装完成后，重启服务或电脑确保生效。\n启动并设置自启动\n# 启动 sshd 服务 Start-Service sshd # 设置开机自动启动 Set-Service -Name sshd -StartupType \u0026#39;Automatic\u0026#39; 这时再运行：\nnet start sshd 就不会报“服务名无效”的错误了。\n1.2) scoop\nscoop install openssh Notes\nNotes ----- Windows 10 or higher includes this build of OpenSSH in the system itself, hence it is recommended to use the system OpenSSH there. Run \u0026#39;sudo D:\\software\\scoop\\apps\\openssh\\current\\install-sshd.ps1\u0026#39; to install sshd and ssh-agent as a service. Run \u0026#39;sudo D:\\software\\scoop\\apps\\openssh\\current\\uninstall-sshd.ps1\u0026#39; to uninstall the services. 运行\nPS C:\\Users\\tohsaka rin\u0026gt; sudo D:\\software\\scoop\\apps\\openssh\\current\\install-sshd.ps1 \u0026gt; sudo net start sshd 输出\nPS C:\\Users\\tohsaka rin\u0026gt; sudo net start sshd OpenSSH SSH Server 服务正在启动 .. OpenSSH SSH Server 服务已经启动成功。 2、开启防火墙 3、连接测试\nPS C:\\Users\\aoi\u0026gt; x tping 192.168.10.4:22 - I|tping: Target -\u0026gt; [host=192.168.10.4] [port=22] 0 0.013 1.554 192.168.10.2 57700 192.168.10.4 22 1 0.011 1.595 192.168.10.2 57702 192.168.10.4 22 seq dns con local-ip:port remote-ip:port 1.595 ms ∈ [ 1 , 1 ] | AVG = 1.57 ± 0.02 FAIL= 0 用户名\n$env:username whoami # 计算机名/用户名，域/用户 设置 ssh 密码 / 不建议更改 Administrator 用户，可能没什么用\nSSH 登录使用的是 Windows 用户账户密码，不是 PIN、指纹或图形密码。 如果该用户没有设置密码，你可能无法通过 SSH 登录（Windows 默认不允许空密码远程登录）。 用户名需要和你在远程机器上看到的完全一致，包括空格，例如 \u0026quot;tohsaka rin\u0026quot;。 net user \u0026#34;tohsaka rin\u0026#34; net user \u0026#34;tohsaka rin\u0026#34; NewPassword123! 连接\nssh -l \u0026#34;tohsaka rin\u0026#34; 192.168.10.4 设置连接时自动打开 pwsh\n打开 管理员权限 PowerShell。 编辑 sshd_config 文件： notepad \u0026quot;C:\\ProgramData\\ssh\\sshd_config\u0026quot; 添加或修改以下行： # 设置登录用户默认 shell ForceCommand \u0026#34;C:\\Program Files\\PowerShell\\7\\pwsh.exe\u0026#34; 或者针对 所有用户：\n# 替换默认 shell Subsystem powershell C:\\Program Files\\PowerShell\\7\\pwsh.exe -sshs -NoLogo -NoProfile 注意路径必须写完整，并且如果路径中有空格，需要用双引号包裹。\n重启\nsudo net stop sshd sudo net start sshd Restart-Service sshd 局域网中的其他主机访问 wsl # 值得注意的是，windows10 的 wsl 不支持 mirror 模式，也就是无法使用 localhost 直接访问 wsl（但是可以用 localhost 访问 docker 容器开出来的端口，合理怀疑 docker 开的端口是直接映射 windows 端口，而非 wsl 端口）。镜像模式直到 win11 的 23H2 版本才支持，win10 的 22H2 的最后一个 build 版本也不支持。\n（1）windows11 # 通过 电脑 A-SSH 登录 电脑 B-Windows，然后自动进入 WSL，而不是 电脑 B-Windows 的 cmd 或 pwsh。\n1、wsl / 设置 wsl 的 root 密码\npasswd root 2、wsl / 首先 wsl 添加 openssh-server\n# 更新并安装 sudo apt update sudo apt install -y openssh-server # 确保 /var/run/sshd 存在（某些发行版需要） sudo mkdir -p /var/run/sshd sudo chown root:root /var/run/sshd # 修改 sshd 配置，将 Port 22 改为 23 # 先备份 sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak 修改 sshd_config\nPort 23 ListenAddress 0.0.0.0 PermitRootLogin yes PasswordAuthentication yes 重启\nsudo service ssh restart 3、windows / 添加映射\nsudo netsh interface portproxy add v4tov4 listenport=23 listenaddress=0.0.0.0 connectport=23 connectaddress=localhost listenport 监听转发端口 listenaddress 设置为 0.0.0.0, 可以给任意网段连接 connectport 目标端口，wsl 开放的 ssh 端口 connectaddress 目标地址，就是 wsl mirrored 的 localhost 一些其他的命令\n# 删除代理 netsh interface portproxy delete v4tov4 listenport=23 listenaddress=0.0.0.0 # 展示所有v4代理 netsh interface portproxy show v4tov4 连接测试\nssh -p 23 root@192.168.10.4 （2）windows10 # [!success] 下面的方法适合在 win10 上启用，我自己不推荐这种麻烦的做法，但如果你是 win10 的话，还是使用这种方法吧。\n如何在局域网的其他主机上中访问本机的 WSL2 - 知乎 如何在局域网的其他主机上中访问本机的 WSL2 - 知乎 Github 上的方法 HobaiRiku/wsl2-auto-portproxy：从 wsl2 linux 到 windows 的代理端口的 TCP 解决方法 \u0026mdash; HobaiRiku/wsl2-auto-portproxy: A TCP workaround tool for proxy port from wsl2 linux to windows 我们这里使用 wslpp 这个项目来将 wsl 的 ip 从 172 代理到 localhost\n工作原理 wslpp start an interval to get IP address of the nat interface and scan all ports listening at all network in the subsystem, then use golang\u0026rsquo;s net to start proxy direct to ports.\n间隔 3s 扫描 wsl 中的所有 ports，然后使用 golang 代理。\n1、启动 wslpp，配置文件在 %HOMEPATH%/.wslpp/config.json 中\ncmd /c wslpp.exe 2、使用 ssh 测试\n3、如果有问题，需要先关闭 23 代理的进程，然后重启 wsl\nnetstat -ano | findstr \u0026#34;:23\u0026#34; taskkill /f /pid \u0026lt;xxxid\u0026gt; More、添加计划任务 wsl 配置 miniforge # wget \u0026#34;https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\u0026#34; # 交互，最后默认no就是不执行初始化 # 如果选择yes就需要手动执行 conda config --set auto_activate_base false bash Miniforge3-$(uname)-$(uname -m).sh # 非交互，直接这个就行 # 然后跳转到下面的「✈️非交互后」 bash Miniforge3-$(uname)-$(uname -m).sh -b 安装配置参考：Miniforge：Conda solving enviroment 终结者 · Aoidayo 补充一些： miniforge linux 默认\n安装在 /root/minifortge3 下面 ✈️ 非交互后\neval \u0026#34;$(/root/miniforge3/bin/conda shell.bash hook)\u0026#34; # 配置写入bashrc conda init # 关闭 base自动激活 conda config --set auto_activate_base false pycharm 配置 ssh # 两步\n1、settings\u0026gt;build,execution,deployment\u0026gt;添加 sftp 连接，配置 ssh 连接，最后 apply\n2、设置 Mappings，\n3、添加 Python Interpreter，选择 ssh，设置 rsync 的文件夹。\n编写一段简单的代码，运行即可。\n","date":"2025年10月17日 12時42分","externalUrl":null,"permalink":"/blog/windows-use/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e1 / Windows 包管理 \n    \u003cdiv id=\"1--windows-%E5%8C%85%E7%AE%A1%E7%90%86\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1--windows-%E5%8C%85%E7%AE%A1%E7%90%86\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\n\u003ch2 class=\"relative group\"\u003escoop \n    \u003cdiv id=\"scoop\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#scoop\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003escoop 多开发环境配置使用教程：\u003ca href=\"https://www.xrgzs.top/posts/scoop-dev-setup\" target=\"_blank\"\u003eScoop 搭建 Windows 开发环境 | 潇然工作室\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003escoop 必不可少的一环：如何使用 \u003ca href=\"https://zhuanlan.zhihu.com/p/463284082\" target=\"_blank\"\u003e(63 封私信 / 82 条消息) Scoop——也许是 Windows 平台最好用的软件（包）管理器 - 知乎\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.suqingyu.com/archives/b3803be6-a713-4aea-8638-58b5402811c5\" target=\"_blank\"\u003eScoop | Windows 下的软件包管理神器 - 苏青羽的小窝\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e官网：\u003ca href=\"https://scoop.sh/#/\" target=\"_blank\"\u003eScoop\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ewindows 的包管理器之一，使用它下载一些比较轻量的软件/命令行工具、以及一些开发环境（类似 Debian 的 apt / brew）。\u003c/p\u003e","title":"Windows Scoop包管理，Terminal优化，WSL配置","type":"blog"},{"content":"本文对这篇魔改版 RTX 2060 12G 装驱动 解决 43 错误 - Shaw\u0026rsquo;s Blog 做更详细的傻瓜式补充。\n实验室的这块 GPU 我在咸鱼上看了一下市价，6G 普遍都是四五百，12G 都要七八百了，这类魔改显卡芯片都是笔记本的。去年的时候我看值得买，里面讨论的 4090m 魔改版功耗比 Desltop 版差了一倍多，实际性能只能和 4070ti 掰手腕，我手上的这块 2060m 跑甜甜圈功耗也就在 120 左右。总之垃圾佬可以选择性的尝试甜品显卡的魔改版，高端一点的显卡还是不建议买魔改版。\nGPU 是魔改自笔记本 RTX 2060M 核心的 RTX 2060 12G 版黄伟达 2060M 魔改卡体验 | 梨数码，直接安装官方的 2060 驱动会出现 43 错误。\n20 系魔改卡正确的安装流程为：\n先手动安装 GTX 1660 Ti with Max-Q 驱动（从公版驱动中解压得到，并从设备管理器中手动选择驱动文件进行安装）； 然后使用公版驱动（CUDA 驱动或 Game Ready 驱动等）覆盖一遍 1、在 NVIDIA GeForce 驱动程序 - N 卡驱动 | NVIDIA 搜索 2060 NoteBooks 驱动\n下方的驱动程序中随便选择一个 Game Ready 驱动\n2、在设备管理器中卸载当前已经安装的 Nvidia 驱动/或者使用 DDU 卸载已经有的驱动\n如果在管理中直接卸载可能会出现卸载完成后桌面分辨率过大、系统卡顿、卡死等情况。\n作为替换，我推荐使用 DDU 卸载，这个卸的干净而且使用非常方便。\n卸载完成后，设备管理器的显示适配器中将不会有和 2060、1660Ti 相关的设备显示。\n3、解压缩驱动\n我这里直接使用 7zip 解压驱动\n4、winx-设备管理器-显示适配器，从本地目录查找，选择解压目录下面Display.Driver里面的 nv_dispi.inf，在下方的驱动中选择 1660Ti With Max-Q Design 的驱动 点击下一步安装\n安装完成后重启应用驱动更改（也有的电脑不用重启，直接就应用成功了，这种情况就直接继续打 2060 驱动）\n重启后\n虽然但是，这个时候看 Nvidia-Smi 已经是 2060 的形状了\n5、接着，以管理员模式运行之前下载的 Nvidia 2060 Notebooks 驱动，等待安装完成\n","date":"2025年10月14日 22時38分","externalUrl":null,"permalink":"/blog/2060m-extra/","section":"","summary":"\u003cp\u003e本文对这篇\u003ca href=\"https://221.ltd/archives/295\" target=\"_blank\"\u003e魔改版 RTX 2060 12G 装驱动 解决 43 错误 - Shaw\u0026rsquo;s Blog\u003c/a\u003e 做更详细的傻瓜式补充。\u003c/p\u003e\n\u003cp\u003e实验室的这块 GPU 我在咸鱼上看了一下市价，6G 普遍都是四五百，12G 都要七八百了，这类魔改显卡芯片都是笔记本的。去年的时候我看值得买，里面讨论的 4090m 魔改版功耗比 Desltop 版差了一倍多，实际性能只能和 4070ti 掰手腕，我手上的这块 2060m 跑甜甜圈功耗也就在 120 左右。总之垃圾佬可以选择性的尝试甜品显卡的魔改版，高端一点的显卡还是不建议买魔改版。\u003c/p\u003e","title":"魔改版RTX 2060 12G装驱动 的傻瓜式补充","type":"blog"},{"content":"记录一点八月的流水账\n八月总共就放了十天假，假期的最后几天先去上海找同学，在那边住了一晚后一起坐飞机去温州玩了两天。\n在上海的时候，我们晚上从新天地那边游荡到外滩，然后又一路从和平饭店那一路游荡到八佰那栋四方仓库。\n新天地附近 在外滩看上海防御塔，不少外国人 四方仓库 和平饭店那条路往前走看见了等身雷姆（我这里拍的很丑)，还得是上海 走到这里内急了，当时已经11点半了，旁边商场都不开了，于是只能花了4r进地铁站里面上了个厕所（我怎么老感觉进地铁站就有厕所了）😭😭😭。\n坐最后一班的地铁回同学公寓 第二天飞去温州了，在温州其实没咋玩，主要还是和本科舍友随便转转。\n","date":"2025年09月03日 21時09分","externalUrl":null,"permalink":"/moments/25-8/25-8/","section":"Moments","summary":"\u003cp\u003e记录一点八月的流水账\u003c/p\u003e\n\u003cp\u003e八月总共就放了十天假，假期的最后几天先去上海找同学，在那边住了一晚后一起坐飞机去温州玩了两天。\u003c/p\u003e\n\u003cp\u003e在上海的时候，我们晚上从新天地那边游荡到外滩，然后又一路从和平饭店那一路游荡到八佰那栋四方仓库。\u003c/p\u003e","title":"25-8","type":"moments"},{"content":" 1 # 好有层次的云 2 # 帮换宿舍的同学搬行李 3 # 一半阴天一半晴天，太阳雨之后出了彩虹\n4 # 最喜欢的阿 b 博主“老猫不吃鱼”，可以带我看全中国各个省市的人文地理和快递特产。\n5 # 书香餐舍关了几天我才看见，虽然没怎么在里面吃过，但是看见还是有点不胜唏嘘 😭\n6 # 早上去吃黄河恒香包子，还可以。 15 的月亮 16 圆，但是今天是 17 月亮也很圆。 一个人走在操场上想起一年多以前和本科同学一起散步，感觉有点小孤独 😢。 ","date":"2025年07月31日 07時00分","externalUrl":null,"permalink":"/moments/25-7/","section":"Moments","summary":"\u003c!-- \u003cscript\u003e\n    window.onload = function() {\n        var zenButton = document.getElementById('zen-mode-button');\n        zenButton.click();\n    };\n    \n    \n\u003c/script\u003e\n --\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1 \n    \u003cdiv id=\"1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e好有层次的云\n\n  \u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"https://image.baidu.com/search/down?url=https://tvax1.sinaimg.cn/large/008cUwX4gy1i37twk3hzyj31hc1404az.jpg\" alt=\"\" /\u003e\n    \n  \u003c/figure\u003e\n\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e2 \n    \u003cdiv id=\"2\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#2\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e帮换宿舍的同学搬行李\n\n  \u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"https://image.baidu.com/search/down?url=https://tvax2.sinaimg.cn/large/008cUwX4gy1i37ttcdhwvj31yw1h67wh.jpg\" alt=\"\" /\u003e\n    \n  \u003c/figure\u003e\n\u003c/p\u003e","title":"25-7","type":"moments"},{"content":"","date":"2025年05月22日 15時38分","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":" Some text is required to be placed here.\nYou cannot see me unless you\u0026rsquo;ve got the password! # This is the content you want to encrypt!\nDo remember to close the hugo-encryptor shortcodes tag:\n测试图片 # 测试 latex # 一个简单的 latex 块\n$$ \\frac{LeakyRelu(e_{ij})}{\\sum_{k=1,k\\in N(i)}LeakyRelu(eik)} $$\n","date":"2025年05月22日 15時38分","externalUrl":null,"permalink":"/blog/encrypt/","section":"","summary":"\u003cp\u003eSome text is required to be placed here.\u003c/p\u003e\n\n\n\u003ch1 class=\"relative group\"\u003eYou cannot see me unless you\u0026rsquo;ve got the password! \n    \u003cdiv id=\"you-cannot-see-me-unless-youve-got-the-password\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#you-cannot-see-me-unless-youve-got-the-password\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eThis is the content you want to encrypt!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDo remember to close the \u003ccode\u003ehugo-encryptor\u003c/code\u003e shortcodes tag:\u003c/strong\u003e\u003c/p\u003e\n\n\n\u003ch1 class=\"relative group\"\u003e测试图片 \n    \u003cdiv id=\"%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./assets/index/Clipboard%20-%202025-05-02%2022.50.47.png\" alt=\"Clipboard - 2025-05-02 22.50.47\" /\u003e\n      \n    \u003c/figure\u003e\n\n\n\u003ch1 class=\"relative group\"\u003e测试 latex \n    \u003cdiv id=\"%E6%B5%8B%E8%AF%95-latex\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%B5%8B%E8%AF%95-latex\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e一个简单的 latex 块\u003c/p\u003e","title":"Hugo 伪加密","type":"blog"},{"content":" PyG中的图神经网络中，scatter和gather运算（离散和聚集）都是非常常见的操作。\n我们以GAT为例，说明scatter在GAT中的应用：一是相似度系数的归一，二是 \\(h_i^{\u0026rsquo;}\\) 的加权邻域聚合。\n相似度系数归一\n$$ \\alpha_{i,j} = \\frac{\\exp(LeakyReLU(e_{i,j}))}{\\sum \\limits_{k \\in N(i)} \\exp(LeakyReLU(e_{i,k})) } $$\n其中，分母部分聚合节点 \\(i\\) 所有邻边相似度系数的运算可以用 scatter_add 简洁优雅的实现。\n\\(h_i^{\u0026rsquo;}\\) 的加权邻域聚合\n$$ h_{i}^{\u0026rsquo;} = \\sigma( \\sum \\limits_{k \\in N(i)} \\alpha_{i,k} h_{k} ) $$\n这里的邻域聚合的操作逻辑基本同上，同样可以使用 scatter_add。\nQ:为什么要用scatter？同样一个邻域聚合的操作，我们可以使用for循环，预处理出neighbor照样可以聚合，那么我们为什么需要使用scatter呢？ A:答案就是scatter支持pytorch的并行化，同时更加便于pytorch的梯度传播。（for循环本身的效率其实不低，因为一个node只有有限个neighbor）\nscatter # self.scatter(dim, index, src) self: tensor张量 Args: dim: 沿dim轴索引 index(LongTensor): 索引 src: 写入self中的值张量，类型需要和self相同 作用：将src中的每个值，按index的指定索引，scatter至self中。 以3维张量为例，self中的值由如下公式决定： 同时self，index以及src需要满足如下条件：\nself、index、src的维度相同（即dim相同:self.dim()=index.dim()=src.dim()，非维度大小） 具体来说就是 index.shape (3,4,5), dim()=3,同理 src.shape=(4,5,6), dim()=3。因为需要执行如上公式的赋值，所以self、index、src的维度需要相同。 index每一个维度的大小 \u0026lt;= src每一个维度的大小, 即 \\(index.shape(i) \\leq src.shape(i),\\ i \\in [0,src.dim())\\) \\(index.shape(i) \\leq self.shape(i),\\ i \\in [0,src.dim()) \\ 且 i \\neq dim_{arg}\\), 即除开操作维度dim之外（指的是scatter的参数dim之外），其他维度的大小都必须小于self的对应维度大小。 理解起来同样很简单，因为其他维度需要索引self，而 index[i][j][k] 在操作维度之上无所谓，他只需要满足 index[i][j][k]\u0026lt;=self.dim(arg_dim) 即可。 张量index的数值大小约束：\nindex中的任意值，其大小需要在 [0, self.dim(arg_dim)-1] 的范围内。 index沿dim维度的一行，值必须唯一（弱约束，违反不报错，但是会产生无意义的重复scatter） 例1.index沿dim的一行数组，值不唯一，产生scatter的重复赋值 例2. index沿dim的一行数组，值唯一，scatter离散到不同的位置 scatter_add # scatter_add的基本原理同scatter，但是self的同一位置可以多次add（即不需要满足上面数学约束的第五条，允许index沿dim轴有重复值），以GAT的邻域聚合为例：\n单头GAT # 邻域相加，得到最后的结果，即 neighbor_sum[i] 为node_i的邻域聚合值。\n多头GAT # 基本原理仍然和单头相似，具体如下图所示：\nreference # 知乎 奔腾的黑猫 博客： PyTorch数据发散（scatter/scatter_add）与聚集（Gather）操作和二者关系 - 知乎 ","date":"2025年04月21日 20時25分","externalUrl":null,"permalink":"/blog/scatter-in-gnn/","section":"","summary":"\u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\" /\u003e\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"\u003e\u003c/script\u003e\n\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js\"\u003e\u003c/script\u003e\n\u003cstyle\u003e\n.aplayer-list-title {\n  color: #60a5fa !important;\n}\n.aplayer-title {\n  color: #60a5fa !important;\n}\n\n.aplayer-lrc p.aplayer-lrc-current {\n  color: #60a5fa !important;\n}\n.aplayer.aplayer-fixed .aplayer-lrc {\n  text-shadow: none;\n}\n\u003c/style\u003e\n\u003cmeting-js\n  server=\"netease\"\n  type=\"song\"\n  id=\"2666749200\"\n  fixed=\"true\"\n  autoplay=\"false\"\n  loop=\"all\"\n  order=\"list\"\n  theme=\"#60A5FA\"\n\u003e\u003c/meting-js\u003e\n\u003cp\u003ePyG中的图神经网络中，scatter和gather运算（离散和聚集）都是非常常见的操作。\u003c/p\u003e","title":"GNN中的scatter离散运算","type":"blog"},{"content":"","date":"2025年04月21日 20時25分","externalUrl":null,"permalink":"/tags/st/","section":"Tags","summary":"","title":"ST","type":"tags"},{"content":" 引言 # conda在不启用libmamba时下载小包的速度就非常慢，一直 solving enviroment... 容易让人狂躁，更不用说用它来安装 pytorch。\n作为替换，可以在 阿里云的pytorch wheels镜像 上下载需要的pytorch，然后再使用 pip 安装，当然后续可能还需要安装 mkl 等依赖，虽然速度尚可，但是还需要手动解决依赖问题，还是有不小的麻烦的。\nconda也清楚自己的依赖解析问题，他们在最新版的conda中引入mamba项目的核心库——用c++重写的依赖项求解器libsolv，conda现在可以通过如下命令开启libmamba作为dependency solver, 支持conda包的高效依赖解析，并行下载与更快速的环境创建。同时，conda也支持直接下载mamba，作为当前环境中下包的一种替换方式。\nconda 启用libmamba作为依赖求解器 / 通过以下方法启用\n# 在base环境中安装conda-libmamba-solver conda install -n base conda-libmamba-solver conda config --set solver libmamba # or conda install numpy --solver=libmamba conda 启用mamba作为替代 / 通过以下方法启用\nconda config --set custom_channels.conda-forge https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ conda install -n base -c conda-forge mamba # or conda install -c conda-forge mamba mamba install numpy 上面的方法不错，当然有一个问题就出现了，conda下mamba的时候又在 solving environment 了怎么办？这个问题太地狱了。\n当然有解决方法，可以使用 mamba/micromamba 这两个类似于 conda/miniconda 的包管理器作为替代，只有一个问题，就是纯血 mamaba 不支持 pycharm 调试。\n不过这个问题也有解决方法，就是使用 miniforge，这个仅仅只内置 conda-forge 源的最小 conda+mamba 发行版，将 mamba 完美继承到 conda 里面，可以 conda 和 mamba 命令互换，几乎0学习成本，而且安装也很方便。\n最后再提一嘴 mamba 原作者正在维护的 pixi，这个工具更加类似于 venv，一个项目创建一个虚拟环境，和 conda/mamba 不是一个赛道的，而且 pixi 换源/镜像非常麻烦，现在不是很成熟。另外作为 pip 的替代品 uv，现在已经相当好用了，可以用conda或者mamba直接安装，因为 pip 的速度尚可，所以关于 uv 的介绍以后有机会再写吧。\n安装 # 如果已经装了一些包管理器，先卸载\n如果已经安装了micromamba，则卸载需要注意: micromamba如果是用cmd安装的，默认会安装在 C:/User/YourName 下面, 需要同时删除可执行文件和所有envs.\n关于miniforge:\n安装 miniforge/conda-forge官网 conda-forge/miniforge: A conda-forge distribution. miniforge github repo页面 conda-forge | community-driven packaging for conda | conda-forge | community-driven packaging for conda guide，同时参考mamba和conda micromamba conda windows安装时需要注意：\n安装时 Install 选项 JustForMe, 否则会出现创建环境下载包时权限不够,无法写入文件 手动添加miniforge的path 换源 # 使用mamba时需要使用pytorch和nvidia仓库的镜像源来下载 pytorch-cuda及其依赖，前者的国内镜像仓库很多，后者的镜像仓库国内只有南方科技大学和cernet校园联合镜像站mirrorz提供，所以一旦这两个哥们不提供支持了，mamba在国内也就废了。\n# 添加 pytorch 镜像 conda config --set custom_channels.pytorch https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ # 添加 nvidia 镜像 conda config --set custom_channels.nvidia https://mirrors.cernet.edu.cn/anaconda-extra/cloud/ .condarc\nwindows : C:\\Users\\ffs linux : ~/.condarc show_channel_urls: true channels: - defaults default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ custom_channels: pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ nvidia: https://mirrors.cernet.edu.cn/anaconda-extra/cloud/ conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ or\nchannels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ show_channel_urls: true custom_channels: pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ nvidia: https://mirrors.cernet.edu.cn/anaconda-extra/cloud/ conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ linux使用命令写入\ncat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; ~/.condarc channels: - defaults show_channel_urls: true default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ custom_channels: pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ nvidia: https://mirrors.cernet.edu.cn/anaconda-extra/cloud/ conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ EOF 基本命令流 # mamba create -n mamba python=3.9 conda search pytorch-cuda=11.8 # mamba install pytorch-cuda=11.8=\u0026lt;build_version\u0026gt; -c nvidia -c pytorch mamba install pytorch-cuda=11.8=h8dd9ede_2 -c nvidia -c pytorch # conda search pytorch=2.3.0 --info mamba install pytorch=2.3.0=py3.9_cuda11.8_cudnn8_0 ","date":"2025年03月19日 22時00分","externalUrl":null,"permalink":"/blog/conda-or-mamba/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e引言 \n    \u003cdiv id=\"%E5%BC%95%E8%A8%80\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%BC%95%E8%A8%80\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003econda在不启用libmamba时下载小包的速度就非常慢，一直 \u003ccode\u003esolving enviroment...\u003c/code\u003e 容易让人狂躁，更不用说用它来安装 \u003ccode\u003epytorch\u003c/code\u003e。\u003c/p\u003e","title":"Miniforge：Conda solving enviroment终结者","type":"blog"},{"content":" 24年终总结 # 新年伊始，我喜欢在冲浪时刷刷关注的技术博主做的年终总结，看他们的学习工作与对生活的思考，但我几乎从来没有自己写过一篇。写作这件事情就像刚进入大学时的晚睡，如果从来没有晚睡，突然很晚睡觉那可能直接睡不着，但是如果后面天天到那个点再睡，其实也就慢慢适应了。\n这篇博客其实很早就开始写了，写了很久一直没写完，最近因为一些事情下决心一口气写完了。\n去年一年经历了许多:和朋友跑了很多地方旅游；本科毕业与分别；独自在母校开启研究生生活。欢笑苦乐五毒俱全只能说是，总之能平静的写下来，说明去年过的还行，我还是扛过来了。\n关于大学与分别 # 从小开始我就习惯减少与别人的联系，社交范围仅限于学习生活工作的几十米半径内，一旦超过我也很少主动联系。高一时填未来想考什么大学，我填的是认知中最远的兰州大学；高考填志愿时分数不够，除了徐州，其他清一色的填的是省外学校。\n不过好巧不巧的是，高中同班同学和我选的是同一个学校的同一门专业，我两高考分数相同，选修课他比我多一个a+，自然而然的也就被分到了同一个宿舍。\n另外两个舍友分别来自盐城和衢州，相近地方的，但我们的生活习性相差很大，我和盐城舍友习惯早睡，开始的时候每天晚上九点多就爬上床了。衢州同学是美国作息，和我们完全颠倒，我的老乡也经常凌晨三四点才睡。我是声音不敏感的类型，同学键盘非线性不规律的敲击声和屏幕溢出的五彩流光反而能让我入睡更加安心（太好了，这小子不在学习）。\n我们的关系很好，毕竟同一个专业每天一起上课吃饭和打游戏，相互抄作业和准备考试，现在回想起来都仿佛还在昨天。\n大二时例行专业分流，我和衢州舍友去了同一个小专业，换了两个舍友，一个四川一个甘肃。四川舍友纯纯的活宝，看到他我就想笑，喜欢在洗澡的时候唱歌，声音大的过道都能听见；学习时很专注，没事儿喜欢研究数学，算是我认识的人中少见的对数学又有天赋、又持之以恒努力的。甘肃舍友胖胖的很可爱，有心减肥无力坚持，我两都喜欢看小说，常常晚上没事儿干的时候就上起点中文网扫书，找到好看的书第二天没个十一二点下不了床。\n大三下学期时即将面临出路选择，我们宿舍从三月底四月初开始全面备战考研。中途暑假衢州舍友投了米哈游的技美，9月返校后没多久后就拿到了offer；我当时考研是因为不想留在徐州了，我想去更远的地方，说不清是逃避还是不想被留在学校一个人；到了9月下旬的时候，四川舍友拿到了保外的资格，在9.30号晚上拿了西工大的录取；我则是保内前几名，唏嘘一阵后我觉得压力很大，要不保内算了，于是也就保了本校。一套连招下来给我甘肃舍友整不会了，搁这儿都当了逃兵。\n大四寒假结束返校时时的雪后南门 大四本科毕设做完后，发现大二时往水卡里一怒之下充的1000块见了底，舍友们的行李和小物件也开始慢慢往家寄，一个个送舍友和认识的同学们离开，心里还是挺不好受的。我们班只有我一个男生留在本校，一层楼仿佛只剩下我一个人，每天晚上从实验室回我的单人宿舍，穿过漫布安全指示灯若隐若现绿光的楼层过道，总会不自觉想起曾经热闹的夜晚，键盘的敲击、洗澡时的歌声、深夜里的窃窃私语。\n在这个阴差阳错来到甚至后来想要逃离的城市里，我第一次感受到和同龄人分别的不舍。\n关于旅游 # 大四学期初保研后我就和四川舍友感觉能待在一起的日子越来越少，往后读研或是工作也不一定有这么空闲的时间，于是无计划性地去了很多地方:11月份先去爬了泰山，12月去了南京，那天狂走了将近4w步，我还发了条说说，12月底和考完研的盐城舍友去济南玩了一天，次年又陆陆续续去了洛阳和青岛。暑假和老乡一起去了北京和大同。年终时和师兄一起去爬了华山。\n不知道大家有没有看过楚门的世界或者岩井俊二拍的烟花。前者主角活在一个虚拟世界中，城市外超出边界的地方无法到达；后者则是因为小男孩的想象力局限，他在循环的梦中带着小女孩私奔时坐的轻轨永远逃不离这个他从小到大生活居住的城镇。\n岩井俊二-烟花 | b站观影地址 以前心情低沉时偶尔会觉得现实是虚构的，而旅游时总会不由庆幸这个世界是真实存在的。\n关于研究生生活 # 大四上保完研后找到了现在的导师提前进组，算是过上了研0生活，同级研0还有一个隔壁班的女生，对比研0和研1生活，还是能明显感觉到不同时期组里的不同氛围。之前很少开组会讨论学术，主要是项目会议以及去现场和甲方对接；进入研一以来常开组会，讨论论文进展，这其中主要原因是因为从23级开始毕业要求提高了，这给师兄师姐以及我们带来不小压力。当然我们研一的还是以项目为主，十一月和老师同学去了两趟郑州干活和汇报。\n去年拍的学院楼 关于依恋感情 # 和大多数人想象的不同，从我现在的身边统计学的视角来看，理工科学校里面也有很多男生谈恋爱。按观察，其实依恋感情和两个分子一起做受环境影响的无目的无规则布朗运动是没什么区别的，这种感情既不会朝某个特定的方向移动，也不会遵循固定轨迹，既不知道什么时候开始，也无法预测什么时候结束，大部分分子在这个过程中享受对彼此无计较的付出和获得。\n虽然在上面将依恋感情这件事情比作布朗运动，但现实终归更加复杂，总会有分子想要对抗这种随机性。\n我不愿意过多和朋友讨论感情，这种仅凭伶仃两人维系的感情无比脆弱。即使两个人曾经无比契合，也可能在某个瞬间走向分离。这种分离并非因为谁对谁错，而是因为感情本身就是一种流动的状态，无法被固定或预测。在分别的那一刻我不会对抗这种随机性，或许在真正经历一段感情之前，我会毫不犹豫放飞地那只白鸟。\n白鸟过河滩 ","date":"2025年03月18日 07時00分","externalUrl":null,"permalink":"/blog/24-sum/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e24年终总结 \n    \u003cdiv id=\"24%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#24%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e新年伊始，我喜欢在冲浪时刷刷关注的技术博主做的年终总结，看他们的学习工作与对生活的思考，但我几乎从来没有自己写过一篇。写作这件事情就像刚进入大学时的晚睡，如果从来没有晚睡，突然很晚睡觉那可能直接睡不着，但是如果后面天天到那个点再睡，其实也就慢慢适应了。\u003c/p\u003e","title":"24年年终总结","type":"blog"},{"content":"","date":"2025年03月18日 07時00分","externalUrl":null,"permalink":"/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/","section":"Tags","summary":"","title":"年终总结","type":"tags"},{"content":" 前言 # 最近使用Git管理Unity项目，误将Unity的Filo Cables包commit\u0026amp;push到仓库中了，折腾半天发现无法撤回，这个包没有导入到Unity之前就有12MB+, 对于一个Git仓库来说还是太大了，所以需要即时从.git中删除所有相关文件的历史提交记录，避免仓库越来越大，防止占用Github公共资源。\n工具 # 推荐使用git filter-repo，一个可以清理并重写仓库中历史记录的工具；自动清理本地仓库的引用与缓存；比git自带的git filter-branch更加高效，后者容易导致历史记录的混乱与重写；适合处理有高占用空间文件的仓库（比如Unity的3d-fbx文件，模型pt文件等等）。\ngit filter-repo：newren/git-filter-repo: Quickly rewrite git repository history (filter-branch replacement) 验证清理效果：git 自带命令 查看git仓库占用空间：git count-objects -vH 常用方法 # A. filter-repo # # 1. 文件夹 # 保留my_folder下面的所有文件, 删除其他所有文件 git filter-repo --path my_folder # --invert-paths 反转. 删除my_folder下面的所有文件 git filter-repo --path my_folder --invert-paths --force # 2. 文件 # --path-glob \u0026lt;file.name\u0026gt; 删除指定文件 git filter-repo --path-glob xxx.mp4 --invert-paths --force # 3. 占用空间 git filter-repo --strip-blobs-bigger-than 100K git filter-repo --strip-blobs-bigger-than 1M git filter-repo --strip-blobs-bigger-than 1G # 清理引用和缓存 git reflog expire --expire=now --all \u0026amp;\u0026amp; git gc --prune=now --aggressive # 可能清理完成之后，把remote也给清除了，这里重置 git remote add origin git@github.com:Aoidayo/xxx.git # push git push origin --force --all git push origin --force --tags B. 验证 # git rev-list 查看高占用文件， 剩余文件大小分布 git count-objects -vH git log \u0026lt;file/dir\u0026gt; # 1. git rev-list # 查看高空间占用的文件 : 列出 Git 仓库中占用空间最大的 10 个文件（blob 对象） git rev-list --objects --all | grep -f \u0026lt;(git verify-pack -v .git/objects/pack/*.idx | grep blob | sort -k 3 -n | cut -f 1 -d \u0026#34; \u0026#34;|tail -10) # 剩余文件大小分布 (B) git rev-list --objects --all | awk \u0026#39;{print $1}\u0026#39; | git cat-file --batch-check=\u0026#39;%(objecttype) %(objectname) %(objectsize) %(rest)\u0026#39; | awk \u0026#39;/^blob/ {print $3, $4}\u0026#39; | sort -n # 2. git count-objects -vH \u0026#39;\u0026#39;\u0026#39; git count-objects -vH count: 19 size: 25.71 KiB in-pack: 283 packs: 1 size-pack: 9.30 MiB prune-packable: 0 garbage: 0 size-garbage: 0 bytes \u0026#39;\u0026#39;\u0026#39; # 3. git log \u0026lt;file/dir\u0026gt; $ git log RopeUpDown\\ # 没有输出表示已经清理干净了 # 输出 和当前文件或者目录有关的commit history \u0026#39;\u0026#39;\u0026#39; \u0026gt; commit c656025c6c761d5f3fc0be2989c34232cdaf5dfb (HEAD -\u0026gt; main) Author: aoi \u0026lt;2908496836@qq.com\u0026gt; Date: Fri Feb 28 21:17:38 2025 +0800 fix(remove filo): add ignore commit 6f0a3ffb2731698ec5ce981f9fa281ee8332ba13 Author: aoi \u0026lt;2908496836@qq.com\u0026gt; Date: Fri Feb 28 20:57:55 2025 +0800 Rope Up Down \u0026#39;\u0026#39;\u0026#39; 附录 # 参考：\nGitFAQ-如何删除提交记录中的大文件_哔哩哔哩_bilibili Git清理.git文件夹中的大文件及.gitignore简单使用 - 知乎 DS ","date":"2025年02月28日 22時15分","externalUrl":null,"permalink":"/blog/git-big/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e前言 \n    \u003cdiv id=\"%E5%89%8D%E8%A8%80\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e最近使用Git管理Unity项目，误将Unity的\u003ccode\u003eFilo Cables\u003c/code\u003e包\u003ccode\u003ecommit\u0026amp;push\u003c/code\u003e到仓库中了，折腾半天发现无法撤回，这个包没有导入到Unity之前就有\u003ccode\u003e12MB+\u003c/code\u003e, 对于一个Git仓库来说还是太大了，所以需要即时从\u003ccode\u003e.git\u003c/code\u003e中删除所有相关文件的历史提交记录，避免仓库越来越大，防止占用Github公共资源。\u003c/p\u003e","title":"Git 清除.git仓库历史记录中的高存储占用文件","type":"blog"},{"content":"","date":"2025年02月28日 22時15分","externalUrl":null,"permalink":"/tags/git%E4%BD%BF%E7%94%A8/","section":"Tags","summary":"","title":"Git使用","type":"tags"},{"content":"","date":"2025年02月09日 15時38分","externalUrl":null,"permalink":"/categories/report/","section":"Categories","summary":"","title":"Report","type":"categories"},{"content":" Refer # 轨迹数据集 ECML/PKDD 15: Taxi Trajectory Prediction (I) | Kaggle 城市拓扑、路网/POI/城市边界 城市拓扑 OSM API (OpenStreetMap) 本质上 osmnx 和 overpass API 都是使用OSM的api获取 osmnx 可以用于获取最新时间的路网数据 Overpass API Overpass 官网 | Overpass by Private.coffee OSM历史数据服务 GeoFabrik 下载指定历史时间的城市路网数据（shp格式,由osm格式转换，路网数据丢失uv信息，当然包含很多富余数据）；同时提供osm.pbf格式的osm压缩数据,没有丢失信息，但是格式转换相当麻烦。 Fabrik上下载的shp转OSM数据介绍及下载 - 百里屠苏top - 博客园 城市边界 osmnx 直接获取 GADM，提供全球行政区边界数据的网站，同时也可以下载路网数据。它支持按国家或地区单独索引和下载。不支持历史数据下载。 level0为国家信息，level1为省份边界信息，level2为城市边界信息，level3为县级信息 不能单shp文件读取 GeoFabrik可以获取部分 shapefile road shapefile的highway枚举值说明 路网清洗 zdsjjtTLG/TrackIt: Map Matching Python Package Based on Hidden Markov Model(HMM) 数据集 # 我们能拿到的数据集分为两种：\n最原始的数据，轨迹数据以GPS点原始信息保留（lng,lat,timestamp,driver_id,user_id or order_id） 论文二次处理的数据集，轨迹数据的GPS点原始信息多半在经过降采样/地图匹配转换后丢失，不一定保留。 恢复GPS点粒度的POI信息困难，只能得到路段粒度的POI信息 城市拓扑、路网/POI/城市边界 # 目前不管是 osmnx 还是 overpassApi，简单的获取城市的boundary体验还不错，但是在框定较大范围的bbox或者boundary后获取数据的体验都不是很好，常给你报 ConnectTimeout 错误。\n作为openstreetmap的替代平台，GeoFabrik有几个优点：\n支持下载历史数据，最大限度的保留城市拓扑和poi信息 支持下载部分城市的边界范围数据 缺点就是一般只能下载国家级别的路网数据，需要你再框一次才能得到城市路网。 关于其他可见 参考 。\nshapefile # 包含这几种后缀的数据\n.shp：几何数据 .shx：几何索引 .dbf：属性数据 .prj：坐标系信息 .cpg：字符编码 shp方面包含如下：\nPoint gis_osm_places_free_1：包含城市、小镇、村庄等行政或聚居点的位置信息。 因数据而异，可能没有包含所有的place信息。 gis_osm_pois_free_1：兴趣点（Points of Interest，POI）数据，如餐厅、商店、景点等。 gis_osm_traffic_free_1：交通相关设施，如交通信号灯、停车标志、人行横道等。 Line gis_osm_roads_free_1：道路网络数据，包括高速公路、主干道、街道、小路、自行车道、人行道等。 PolyGon gis_osm_places_a_free_1：地点的多边形数据，如城市、小镇、村庄等的边界。 gis_osm_pois_a_free_1：兴趣点的多边形数据。 需要注意的是，road_shapefile中包含大量的冗余数据（没有必要添加的路段类型fclass），拿porto市举例：\n原始 Porto Road Shapefile Libcity porto road geo/rel 对比libcity处理的porto市路网数据，可以发现现有路网中存在许多冗余数据（比如porto市的最南边），所以需要进行路网数据的清洗。\n因为每个国家的情况不同，国内外的路段保留类型不建议使用相同的策略，对于国外的路网数据，保留如下字段：\nreserved_fclass = {\u0026#34;motorway\u0026#34;: 0, \u0026#34;trunk\u0026#34;: 1, \u0026#34;primary\u0026#34;: 2, \u0026#34;secondary\u0026#34;: 3, \u0026#34;tertiary\u0026#34;: 4, \u0026#34;unclassified\u0026#34;: 5, \u0026#34;residential\u0026#34;: 6, \u0026#34;motorway_link\u0026#34;: 7, \u0026#34;trunk_link\u0026#34;: 8, \u0026#34;primary_link\u0026#34;: 9, \u0026#34;secondary_link\u0026#34;: 10, \u0026#34;tertiary_link\u0026#34;: 11, \u0026#34;living_street\u0026#34;: 12, \u0026#34;road\u0026#34;: 13} 过滤后得到的路网稍显合理，但是仍需要进一步处理。\nFiltered Porto RoadMap 路网清洗 # 恢复uv信息 # 建图不光需要路网的线层信息，同样需要点层信息，这里的点指的是路段OD、uv。 osm数据有uv字段，但是从GeoFabrik上下载的shapefile丢失这部分数据，所以只能通过取路段的OD来作为uv。\n原始road shapefile（统一WGS-84,EPSG:4326坐标系操作）\n提取路段OD为uv 映射 set(uv) 建立点层 建立基础的点层和线层 修复路网 # 路网在恢复uv信息后需要清理环路、自边、自相交、联通性问题，同时进行拓扑优化和路网重塑，规整线层和点层。\n构建点层信息 自己构建：使用在恢复uv信息中得到的node构建点层 GoTrakIt：使用第三方包从线层构建点层 清理线层的环路、自边、自相交 处理标准路网的连通性问题 重映射点层 最后对路网做拓扑优化和路网重塑 最后得到构建路网的必须数据： road 和 node ，即 rel 和 geo 。\n轨迹清洗 # 行程切分 停留点删除 轨迹点上下采样 滑动窗口平均/卡尔曼滤波平滑 地图匹配 # FMM：fmm-py3: FMM for python3 ST-MapMatching：wenke727/ST-MapMatching: 基于时间和空间特性的全局地图匹配算法，基础路网可根据 bbox 下载并处理得到 GoTrackIt：zdsjjtTLG/TrackIt: Map Matching Python Package Based on Hidden Markov Model(HMM) POI k近邻 # 可以获取 Point和Polygon类型的POI数据（点、多边形面） 处理时为了方便起见，可以统一将坐标系投影到平面坐标系，作k近邻计算。 见仁见智：路段 k近邻POI/GPS k近邻POI k近邻可以在collate_fn中实现 ","date":"2025年02月09日 15時38分","externalUrl":null,"permalink":"/report/raw-data-process/","section":"","summary":"\u003ch2 class=\"relative group\"\u003eRefer \n    \u003cdiv id=\"refer\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#refer\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e轨迹数据集\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.kaggle.com/competitions/pkdd-15-predict-taxi-service-trajectory-i/data\" target=\"_blank\"\u003eECML/PKDD 15: Taxi Trajectory Prediction (I) | Kaggle\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e城市拓扑、路网/POI/城市边界\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e城市拓扑\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eOSM API (OpenStreetMap)\n\u003cul\u003e\n\u003cli\u003e本质上 \u003ccode\u003eosmnx\u003c/code\u003e 和 \u003ccode\u003eoverpass API\u003c/code\u003e 都是使用OSM的api获取\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eosmnx\u003c/code\u003e 可以用于获取最新时间的路网数据\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOverpass API\u003c/strong\u003e \u003ca href=\"https://overpass.kumi.systems/#about\" target=\"_blank\"\u003eOverpass 官网 | Overpass by Private.coffee\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eOSM历史数据服务\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://download.geofabrik.de/\" target=\"_blank\"\u003eGeoFabrik\u003c/a\u003e 下载指定历史时间的城市路网数据（shp格式,由osm格式转换，路网数据丢失uv信息，当然包含很多富余数据）；同时提供osm.pbf格式的osm压缩数据,没有丢失信息，但是格式转换相当麻烦。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cnblogs.com/bltstop/p/18090135\" target=\"_blank\"\u003eFabrik上下载的shp转OSM数据介绍及下载 - 百里屠苏top - 博客园\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e城市边界\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eosmnx\u003c/code\u003e 直接获取\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gadm.org/index.html\" target=\"_blank\"\u003eGADM\u003c/a\u003e，提供全球行政区边界数据的网站，同时也可以下载路网数据。它支持按国家或地区单独索引和下载。不支持历史数据下载。\n\u003cul\u003e\n\u003cli\u003elevel0为国家信息，level1为省份边界信息，level2为城市边界信息，level3为县级信息\u003c/li\u003e\n\u003cli\u003e不能单shp文件读取\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eGeoFabrik可以获取部分\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eshapefile\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://wiki.openstreetmap.org/wiki/Zh-hans:Map_Features#.E5.85.AC.E8.B7.AF\" target=\"_blank\"\u003eroad shapefile的highway枚举值说明\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e路网清洗\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/zdsjjtTLG/TrackIt\" target=\"_blank\"\u003ezdsjjtTLG/TrackIt: Map Matching Python Package Based on Hidden Markov Model(HMM)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e数据集 \n    \u003cdiv id=\"%E6%95%B0%E6%8D%AE%E9%9B%86\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%95%B0%E6%8D%AE%E9%9B%86\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e我们能拿到的数据集分为两种：\u003c/p\u003e","title":"数据清洗","type":"blog"},{"content":" 参考 # Hugo安装 零成本搭建个人博客：hugo安装 - 知乎 Hugo安装官方文档 Hugo原仓库 Hugo使用参考文档 加密 Hugo | 为博客文章添加密码 – Zoe\u0026rsquo;s Dumpster. hugo-enc 主题 blowfish 使用blowfish主题的博客示例 前三个有github参考可以用于参考 捣鼓静态博客时在github上抄别人的配置，比费劲巴拉的看教程文档来的舒服。 Ast3risk-ops/website 一位印尼前端的博客 江ノ島エスカー 详解程序中循环次数的判断 · Ohdmire GithubActions 自动部署 使用 Github Actions 自动部署 hugo 博客 | Choi\u0026rsquo;s Notes 使用 GitHub Actions 自动化 Hugo 博客部署 - MartinLwx\u0026rsquo;s Blog 基于 Github Action 自动构建 Hugo 博客 - 问题： Hugo主题blowfish搜索功能失效的解决办法之一 - 哔哩哔哩 CDN 使用双线 DNS 和 CDN 加速你的 GitHub Page · 瞳のBlog Hugo和Blowfish使用固定版本如下，方便后面维护\n# hugo 0.140.2 # blowfish latest-version: 2.82.0 【forked】 # 考虑后续是升级，在hugo起的myblog中将blowfish中的配置文件准备好 安装Hugo # 到Hugo原仓库下载预编译的hugo extened二进制文件\n# linux wget wget https://github.com/gohugoio/hugo/releases/download/v0.143.1/hugo_extended_0.143.1_linux-amd64.tar.gz tar -zxvf filename.tar.gz -C ./ # 添加至环境变量 # 将 `hugo` 目录添加到现有的 `PATH` 环境变量中 # 使用echo $path查看环境变量 nano ~/.bashrc # 添加path export PATH=$PATH:/vol1/1000/docker/docker_data/hugo source ~/.bashrc # 检查 hugo version Hugo规则 # 标题和正文之间必须有空行 一级标题无法被文章右侧的大纲TOC渲染 代码块必须注明语言才能使用enableCodeCopy, 以 kill process 为例 Hugo渲染规则，默认只渲染过去的文章没当前文章不渲染 hugo文章缺失 在hugo.yaml根级加入buildFuture: true 本篇文章定义发布时间为一千年以后, 如果你可以看到，就说明yaml在工作。 hugo.toml 中的baseURL必须指定为访问的网址，否则无法搜索（本地部署无法搜索的原因） 主题配置 # Blowfish # 基本沿用website仓库的配置，略作修改。\n目录结构 # # 目录结构 |-- ./.github | `-- ./.github/workflows |-- ./archetypes # frontmatter默认 |-- ./assets # 图片文件引用 | `-- ./assets/img |-- ./config # 配置文件 | `-- ./config/_default | |-- ./config/_default/hugo.toml | |-- ./config/_default/languages.zh-cn.toml | |-- ./config/_default/markup.toml | |-- ./config/_default/menus.zh-cn.toml | `-- ./config/_default/params.toml |-- ./content # 这里放文章 | `-- ./content/blog | |-- ./content/blog/blog-history | `-- ./content/blog/use-hugo |-- ./data |-- ./i18n |-- ./layouts # 可以用于修改默认页面，比如comments.html |-- ./static # 网站默认图片位置 `-- ./themes # 主题here short code # shortcode 图标 # 将从阿里图标上下载的icon.svg进行格式转换，将fill中的值全部替换为 currentColor。\nimport re import argparse def replace_fill_with_currentcolor(svg_content): # 使用正则表达式查找并替换所有的 fill=\u0026#34;#xxxxxx\u0026#34; 为 fill=\u0026#34;currentColor\u0026#34; updated_svg = re.sub(r\u0026#39;fill=\u0026#34;[^\u0026#34;]+\u0026#34;\u0026#39;, \u0026#39;fill=\u0026#34;currentColor\u0026#34;\u0026#39;, svg_content) return updated_svg def main(): # 设置命令行参数 parser = argparse.ArgumentParser(description=\u0026#34;Replace all fill color values in an SVG file with \u0026#39;currentColor\u0026#39;.\u0026#34;) parser.add_argument(\u0026#39;-f\u0026#39;,\u0026#39;--file\u0026#39;, help=\u0026#34;Path to the input SVG file\u0026#34;) args = parser.parse_args() # 读取原始 SVG 文件 try: with open(args.file, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: svg_content = file.read() except FileNotFoundError: print(f\u0026#34;Error: The file \u0026#39;{args.input_file}\u0026#39; does not exist.\u0026#34;) return # 替换 fill 值 updated_svg_content = replace_fill_with_currentcolor(svg_content) # 将修改后的 SVG 内容保存到新的文件 with open(args.file, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: file.write(updated_svg_content) print(f\u0026#34;SVG fill color replaced with currentColor successfully! Saved to \u0026#39;{args.file}\u0026#39;.\u0026#34;) # python convert_svg.py -f bilibili.svg if __name__ == \u0026#34;__main__\u0026#34;: main() Github Actions # Github Actions PersonalAccessToken：hidden here\ncustom domain # 现在github.io配置页面定义custom domain为自己的域名 第二步DNS验证：在cloudflare上，将自己的三级域名Cname到 github.io 上。 现在访问github.io会自动跳转到custom domain上。 Actions # 1、申请token settings-Developrt Settings-Personal access tokens-Tokens(classic) 2、在仓库中配置Actions脚本\nname: deploy on: push: workflow_dispatch: schedule: # Runs everyday at 0:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build Web run: hugo - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: aoidayo/aoidayo.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} cname: blog.aoidayo.site 3、在仓库中配置Token\nsettings/secrets and variables/actions中添加你申请的token\nCDN【TODO】 # Github pages + cloudflare\n要使用国内的cdn，需要备案，暂时搁置。\n备份博客 # 在家里的服务器上添加一个用端口访问的备份博客，同时使用Github Actions自动部署。\nnginx # # docker docker run -d \\ --privileged \\ --name nginx-server \\ -p 1024:80 \\ -v /vol1/1000/docker/docker_data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro\\ -v /vol1/1000/docker/docker_data/nginx/conf:/etc/nginx/conf.d:ro \\ -v /vol1/1000/docker/docker_data/nginx/ssl:/home/dockers/nginx/ssl \\ -v /vol1/1000/docker/docker_data/nginx/html:/usr/share/nginx/html:rw \\ nginx # https://www.cnblogs.com/Kingram/p/15009385.html # 修改容器中的nginx.conf # user nginx; user root; docker cp ./nginx.conf nginx-server:/etc/nginx/nginx.conf # public/* -\u0026gt; nginx/html/hugo # nginx/conf/hugo.conf server{ #只代理80端口 listen 80; # 监听指定域名 server_name you.aoidayo.site; location / { root /usr/share/nginx/html/hugo; index index.html index.htm; } } Hugo常用命令 # hugo new site myblog hugo new content blog/my-first-blog/my-first-blog.md # 在content/下面新建blog/xx/index.md hugo new post xx/index.md # 在content/post下面新建xx/index.md # hugo new 有扩展用法【TODO】 hugo # 生成public和resources # 部署在1313端口访问 hugo server --theme blowfish --bind 0.0.0.0 --port 1313 hugo server --theme blowfish --bind 0.0.0.0 --port 1313 --buildDrafts Linux常用命令 # 解压 # # tar tar -zxvf filename.tar.gz -C ./ - `-t`: 查看 `.tar.gz` 文件中的内容。 - `-x`: 解压文件。 - `-z`: 使用 `gzip` 解压。 - `-v`: 显示解压进度。 - `-f`: 文件名。 - `-C`: 指定解压路径。 # zip unzip xxx.zip -d ./ kill process # # windows netstat -ano | findstr :8080 taskkill /PID 1234 /F netstat -ano | findstr :8080 # Linux ps aux | grep hugo kill -9 PID 树形目录 # # windows tree /f func : 打印当前目录下的所有目录和文件 # [](https://www.cnblogs.com/ricolee/p/cmd-tree.html) # 没找到其它参数可以只打印一级或者二级目录类似的参数； # 安装tree https://blog.csdn.net/qq_33154343/article/details/100064726 tree -dL # linux tree -dL /path/to/dir -d /path/to/dir -L 显示指定层级 Appendix # 从0构建Hugo主题仓库 # ######################## /1. hugo new site myblog/ ######################### # hugo new site myblog # 创建新网站 root@familyNas:/vol1/1000/docker/docker_data/hugo# hugo new site myblog Congratulations! Your new Hugo site was created in /vol1/1000/docker/docker_data/hugo/myblog. Just a few more steps... 1. Change the current directory to /vol1/1000/docker/docker_data/hugo/myblog. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. ######################## /2. 修改配置文件/ ######################### # config/_default/下面的所有toml ######################## /2. 安装主题/ ######################### ## cd myblog ## git init ## git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish ## 这里可以替换成自己fork的仓库 ######################## /3. hugo server/ ######################### ## hugo server ## hugo server --theme blowfish --bind 0.0.0.0 --port 1313 ## hugo server --theme blowfish --bind 0.0.0.0 --port 1313 --buildDrafts ### -D means --buildDrafts ### windows hugo server一直是用不了1313的原因https://blog.weiqh.net/2022/11/16/Windows-10-%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/ ######################## /4. hugo new/ ######################### # hugo new content blog/my-first-blog.md gitignore 4 hugo # # Hugo resources/ public/ # Hugo themes # themes/blowfish/ # Binaries for programs and plugins *.exe *.exe~ *.dll *.so *.dylib # Test binary, built with `go test -c` *.test # Output of the go coverage tool, specifically when used with LiteIDE *.out # Dependency directories (remove the comment below to include it) # vendor/ # others node_modules .hugo_build.lock # OS generated files .DS_Store .DS_Store? ._* .Spotlight-V100 .Trashes .idea .jampack ","date":"2025年01月07日 15時38分","externalUrl":null,"permalink":"/blog/use-hugo/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e参考 \n    \u003cdiv id=\"%E5%8F%82%E8%80%83\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%8F%82%E8%80%83\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHugo安装\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/440175312\" target=\"_blank\"\u003e零成本搭建个人博客：hugo安装 - 知乎\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/installation/linux/\" target=\"_blank\"\u003eHugo安装官方文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\"\u003eHugo原仓库\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/getting-started/quick-start/\" target=\"_blank\"\u003eHugo使用参考文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e加密\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blog.tantalum.life/posts/encrypted-blog-posts/\" target=\"_blank\"\u003eHugo | 为博客文章添加密码 – Zoe\u0026rsquo;s Dumpster.\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/adityatelange/hugo_enc\" target=\"_blank\"\u003ehugo-enc\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e主题\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blowfish.page/\" target=\"_blank\"\u003eblowfish\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e使用blowfish主题的博客示例\n\u003cul\u003e\n\u003cli\u003e前三个有github参考可以用于参考\u003c/li\u003e\n\u003cli\u003e捣鼓静态博客时在github上抄别人的配置，比费劲巴拉的看教程文档来的舒服。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Ast3risk-ops/website\" target=\"_blank\"\u003eAst3risk-ops/website\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/utrodus/utrodus.com\" target=\"_blank\"\u003e一位印尼前端的博客\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://enoshima-escar.zen96k.mydns.jp/\" target=\"_blank\"\u003e江ノ島エスカー\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ohdmire.github.io/posts/loopcount/#%E6%A4%8D%E6%A0%91%E9%97%AE%E9%A2%98\" target=\"_blank\"\u003e详解程序中循环次数的判断 · Ohdmire\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eGithubActions\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cloud.tencent.com/developer/article/2262171\" target=\"_blank\"\u003e自动部署\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://smc.im/post/deploy-hugo-blog-with-github-actions/\" target=\"_blank\"\u003e使用 Github Actions 自动部署 hugo 博客 | Choi\u0026rsquo;s Notes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://martinlwx.github.io/zh-cn/use-github-actions-to-automate-hugo-build/\" target=\"_blank\"\u003e使用 GitHub Actions 自动化 Hugo 博客部署 - MartinLwx\u0026rsquo;s Blog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.lixueduan.com/posts/blog/01-github-action-deploy-hugo/\" target=\"_blank\"\u003e基于 Github Action 自动构建 Hugo 博客 -\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e问题：\n\u003ca href=\"https://www.bilibili.com/opus/908761972570325045\" target=\"_blank\"\u003eHugo主题blowfish搜索功能失效的解决办法之一 - 哔哩哔哩\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCDN\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.hetong-re4per.com/posts/cdn-for-your-github-page/\" target=\"_blank\"\u003e使用双线 DNS 和 CDN 加速你的 GitHub Page · 瞳のBlog\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHugo和Blowfish使用固定版本如下，方便后面维护\u003c/p\u003e","title":"使用hugo","type":"blog"},{"content":" FrameWork # Typecho 24/1/? # wordpress的精简版本，用docker装容易产生nginx的user:www-data 权限问题，在使用时必须没写完一篇文章就sudo chmod -Rf 777 typecho/一次，其他没有缺点，主题也都不错，主要走简洁风（Handsome开心版）。\n因为权限问题弃用。\nHello Hexo 24/4/14 # 第一个博客在github.io上使用Hexo和GithubActions搭建。\nGithub原生支持的静态博客框架有Jekyll, Hexo, Hugo这三个，其中Hexo使用起来最麻烦，Hugo和Jekyll稍微简单一点。\n这类静态博客使用起来最大的槽点就是主题基本上没有一个比较详细的使用说明，当你 clone一个主题下来后，可以说是开箱不能用🤣，所有关乎到日常使用以及美观的配置都得你自己摸索（甚至直接在github上找别人的配置文件也不保证能100%复现），这也就导致了网上关于静态博客如何配置的教程也是最多的，最奇怪的一点就是为什么作者不能给一个开箱即用的 simple starter再搭配一个接入github评论的 mkdocs让大家来讨论，这就是前端的奇奇怪怪之处吧。\n我尝试过如下几种静博框架的不同主题：\nHexo Butterfly Hugo Blowfish Stack Jekyll tmaize-blog Hello Hugo 24/4/14 # Hugo是我尝试过的三个静态博客框架中，视觉效果最为出色的一个。特别是其中的Blowfish和Stack主题，它们的设计简洁而不失优雅，色调和排版清新现代。Blowfish主题一种类似苹果的背景高斯模糊展示两种层次的背景，Stack有一种说不上来的直观、流畅。\n总之Hugo我很喜欢，但是配置和使用太麻烦了。\n顺带一提，Hugo虽然原生支持markdown，但是如果你要在页面上显示目录的话，只能使用二级及以下的目录，不能使用一级目录撰文。\nHello Wordpress 24/5/? # Wordpress的Sakurairo很好，但是太重了，我的小带宽承受不了。\nHello Halo 24/10/12 # 争议性最大的，彼时的Halo还没有开始收费，其在12月份宣布启用专业版收费，价格相当高，960买断才能使用应用市场中的插件。\n抛开争议话题不谈，Halo本身做的还是很优秀的，较低的内存占用和较快的响应速度、不算丑的外观、简单的docker部署、两键将备份打包迁移到新网站，这些优点是许多用户选择它的理由，对比停更几年的Typecho和高占用的Wp，让人很难不选择Halo。\nDeployMent # 旅游地图 24/11/1 # 偶尔看看部署的这个小玩具，可以想起旅游的快乐时光。\nNas导航 24/11/1 # copy一个学弟的导航页，用来重定向到我的nas服务。\nPhoto by Xiaomi 14 Transfer # 博客迁移 25/1/23 # 其实更早，大概在25/1/11左右就已经迁移到家里的服务器上了。\n因为没有给80和443端口，所以只能用端口访问了😭。\n","date":"2025年01月04日 15時38分","externalUrl":null,"permalink":"/blog/blog-history/","section":"","summary":"\u003ch2 class=\"relative group\"\u003eFrameWork \n    \u003cdiv id=\"framework\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#framework\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\n\u003ch3 class=\"relative group\"\u003eTypecho 24/1/? \n    \u003cdiv id=\"typecho-241\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#typecho-241\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003ewordpress的精简版本，用docker装容易产生\u003ccode\u003enginx的user:www-data\u003c/code\u003e 权限问题，在使用时必须没写完一篇文章就\u003ccode\u003esudo chmod -Rf 777 typecho/\u003c/code\u003e一次，其他没有缺点，主题也都不错，主要走简洁风（Handsome开心版）。\u003c/p\u003e","title":"Blog History","type":"blog"},{"content":"备用博客 (防止github page挂了)\n学生\n绝望南通人 斗破苍穹/JUMP/阿梓 Recent Blogs Windows Scoop包管理，Terminal优化，WSL配置 2025年10月17日 12時42分\u0026middot;7088 字 Blog Windows 魔改版RTX 2060 12G装驱动 的傻瓜式补充 2025年10月14日 22時38分\u0026middot;714 字 Blog Hugo 伪加密 2025年05月22日 15時38分\u0026middot;54 字 Blog Hugo GNN中的scatter离散运算 2025年04月21日 20時25分\u0026middot;1164 字 Blog ST Miniforge：Conda solving enviroment终结者 2025年03月19日 22時00分\u0026middot;1308 字 Blog ST All Posts ","externalUrl":null,"permalink":"/","section":"","summary":"\u003cp\u003e\u003ca href=\"https://you.aoidayo.site:1024/\" target=\"_self\"\u003e备用博客\u003c/a\u003e (防止github page挂了)\u003cbr\u003e\u003c/p\u003e\n\u003c!-- \u003ch3 style='color:#CBD5E1'\u003e --\u003e\n\u003ch3 id=\"typeit-6fb22d3943ec7794c447a8e7c1bb77a4\"\u003e\u003c/h3\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-6fb22d3943ec7794c447a8e7c1bb77a4\", {\n        strings: [\"\",\"どうして君が泣くの\",\"まだ仆も泣いていないのに\",\"自分より 悲しむから\",\"つらいのがどっちか わからなくなるよ\",\"\"],\n        speed:  300 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  false ,\n        waitUntilVisible:  true ,\n        loop:  true \n      }).go();\n    });\n\u003c/script\u003e\n\u003cblockquote\u003e\n\u003c!-- \u003c/h3\u003e --\u003e\u003c/blockquote\u003e\n\u003cdiv\u003e\n学生\u003cbr\u003e\n绝望南通人 \u003cbr\u003e\n\u003ca href='https://book.qidian.com/info/1209977/' target=\"_blank\"\u003e斗破苍穹\u003c/a\u003e/JUMP/\u003ca href=\"https://space.bilibili.com/7706705\" target=\"_blank\"\u003e阿梓\u003c/a\u003e \u003cbr\u003e\n\u003c/div\u003e\n\u003c!-- \u003ca\n  class=\"!rounded-md bg-primary-600 px-4 py-2 !text-neutral !no-underline hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"\n  href=\"/posts\"\n  target=\"_self\"\n  \n  role=\"button\"\n\u003e\n  \nPosts\n\n\u003c/a\u003e\n --\u003e\n\u003c!-- \u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  :wave: Hi there!\n\u003c/div\u003e\n --\u003e\n\u003c!-- I game too much. I also write words onto this site sometimes.  --\u003e\n\u003c!-- \u003cthe-fold\u003e\u003c/the-fold\u003e --\u003e\n\n\n\n\n\n\n\n\u003ch2 class=\"mt-20 text-2xl font-extrabold mb-10\"\u003eRecent Blogs\u003c/h2\u003e\n\n\n\n\n\u003csection class=\"space-y-10 w-full mt-10 mb-10\"\u003e\n    \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/windows-use/\"\u003e\n    \n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/1760363667479_8647532121085158976_hu_2a021475b24edca5.png);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/windows-use/\"\u003eWindows Scoop包管理，Terminal优化，WSL配置\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-10-17T12:42:24\u0026#43;08:00\"\u003e2025年10月17日 12時42分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e7088 字\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \n  \n  \u003cspan style=\"margin-top:0.5rem\" class=\"mr-2\" onclick=\"window.open(\u0026#34;/categories/blog/\u0026#34;,'_self');return false;\"\u003e\n    \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Blog\n  \u003c/span\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \n  \n  \n  \n  \n  \n  \n  \u003cspan style=\"margin-top:0.5rem\" class=\"mr-2\" onclick=\"window.open(\u0026#34;/tags/windows/\u0026#34;,'_self');return false;\"\u003e\n    \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Windows\n  \u003c/span\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \n  \n  \n  \n\u003c/div\u003e\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/2060m-extra/\"\u003e\n    \n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/251a1b954c19e523703430e637165193_13640291580729233156_hu_bdb91bbaab4f5102.jpg);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/2060m-extra/\"\u003e魔改版RTX 2060 12G装驱动 的傻瓜式补充\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-10-14T22:38:24\u0026#43;08:00\"\u003e2025年10月14日 22時38分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e714 字\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \n  \n  \u003cspan style=\"margin-top:0.5rem\" class=\"mr-2\" onclick=\"window.open(\u0026#34;/categories/blog/\u0026#34;,'_self');return false;\"\u003e\n    \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Blog\n  \u003c/span\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \n  \n  \n  \n  \n  \n  \n  \n\u003c/div\u003e\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/encrypt/\"\u003e\n    \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/encrypt/\"\u003eHugo 伪加密\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-05-22T15:38:16\u0026#43;08:00\"\u003e2025年05月22日 15時38分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e54 字\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \n  \n  \u003cspan style=\"margin-top:0.5rem\" class=\"mr-2\" onclick=\"window.open(\u0026#34;/categories/blog/\u0026#34;,'_self');return false;\"\u003e\n    \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Blog\n  \u003c/span\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \n  \n  \n  \n  \n  \n  \n  \u003cspan style=\"margin-top:0.5rem\" class=\"mr-2\" onclick=\"window.open(\u0026#34;/tags/hugo/\u0026#34;,'_self');return false;\"\u003e\n    \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Hugo\n  \u003c/span\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \n  \n  \n  \n\u003c/div\u003e\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/scatter-in-gnn/\"\u003e\n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/blog/scatter-in-gnn/feature_hu_47f2abba3d20b950.jpeg);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/scatter-in-gnn/\"\u003eGNN中的scatter离散运算\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-04-21T20:25:21\u0026#43;08:00\"\u003e2025年04月21日 20時25分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e1164 字\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \n  \n  \u003cspan style=\"margin-top:0.5rem\" class=\"mr-2\" onclick=\"window.open(\u0026#34;/categories/blog/\u0026#34;,'_self');return false;\"\u003e\n    \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Blog\n  \u003c/span\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \n  \n  \n  \n  \n  \n  \n  \u003cspan style=\"margin-top:0.5rem\" class=\"mr-2\" onclick=\"window.open(\u0026#34;/tags/st/\u0026#34;,'_self');return false;\"\u003e\n    \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    ST\n  \u003c/span\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \n  \n  \n  \n\u003c/div\u003e\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n            \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003ca class=\"flex flex-wrap article \" href=\"/blog/conda-or-mamba/\"\u003e\n    \n        \n        \u003cdiv class=\"w-full md:w-auto h-full thumbnail nozoom thumbnailshadow md:mr-7\" style=\"background-image:url(/blog/conda-or-mamba/feature_hu_141c6d4525a6d5fa.png);\"\u003e\u003c/div\u003e\n        \n      \u003cdiv class=\" mt-3 md:mt-0\"\u003e\n      \u003cdiv class=\"items-center text-left text-xl font-semibold\"\u003e\n        \n        \u003cdiv class=\"font-bold text-xl text-neutral-800 decoration-primary-500 hover:underline hover:underline-offset-2 dark:text-neutral\"\n          href=\"/blog/conda-or-mamba/\"\u003eMiniforge：Conda solving enviroment终结者\u003c/div\u003e\n        \n        \n        \n      \u003c/div\u003e\n      \u003cdiv class=\"text-sm text-neutral-500 dark:text-neutral-400\"\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \u003ctime datetime=\"2025-03-19T22:00:16\u0026#43;08:00\"\u003e2025年03月19日 22時00分\u003c/time\u003e\u003cspan class=\"px-2 text-primary-500\"\u003e\u0026middot;\u003c/span\u003e\u003cspan\u003e1308 字\u003c/span\u003e\n  \n\n  \n  \n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"flex flex-row flex-wrap items-center\"\u003e\n  \n  \n  \n  \n  \u003cspan style=\"margin-top:0.5rem\" class=\"mr-2\" onclick=\"window.open(\u0026#34;/categories/blog/\u0026#34;,'_self');return false;\"\u003e\n    \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    Blog\n  \u003c/span\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \n  \n  \n  \n  \n  \n  \n  \u003cspan style=\"margin-top:0.5rem\" class=\"mr-2\" onclick=\"window.open(\u0026#34;/tags/st/\u0026#34;,'_self');return false;\"\u003e\n    \u003cspan class=\"flex\" style=\"cursor: pointer;\"\u003e\n  \u003cspan class=\"rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\u003e\n    ST\n  \u003c/span\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \n  \n  \n  \n\u003c/div\u003e\n\n\n\n\n      \u003c/div\u003e\n      \n    \u003c/div\u003e\n  \u003c/a\u003e\n\n            \n        \n    \n\u003c/section\u003e\n\n\n\n\u003c!-- \n\n\n\n\n\n\n\u003ch2 class=\"mt-20 text-2xl font-extrabold mb-10\"\u003eSamples\u003c/h2\u003e\n\n\n\n\n\u003csection class=\"space-y-10 w-full mt-10 mb-10\"\u003e\n    \n        \n    \n\u003c/section\u003e\n\n\n --\u003e\n\u003ca\n  class=\"!rounded-md bg-primary-600 px-4 py-2 !text-neutral !no-underline hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"\n  href=\"/blog\"\n  target=\"_self\"\n  \n  role=\"button\"\n\u003e\n  \nAll Posts\n\n\u003c/a\u003e","title":"","type":"page"},{"content":"博客写在这里哦。\n","externalUrl":null,"permalink":"/blog/","section":"","summary":"\u003cp\u003e博客写在这里哦。\u003c/p\u003e","title":"","type":"blog"},{"content":"上课或者组会报告\n","externalUrl":null,"permalink":"/report/","section":"","summary":"\u003cp\u003e上课或者组会报告\u003c/p\u003e","title":"","type":"report"},{"content":"","externalUrl":null,"permalink":"/moments/","section":"Moments","summary":"","title":"Moments","type":"moments"}]